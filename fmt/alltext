0100 typedef unsigned int   uint;
0101 typedef unsigned short ushort;
0102 typedef unsigned char  uchar;
0103 typedef uint pde_t;
0104 
0105 
0106 
0107 
0108 
0109 
0110 
0111 
0112 
0113 
0114 
0115 
0116 
0117 
0118 
0119 
0120 
0121 
0122 
0123 
0124 
0125 
0126 
0127 
0128 
0129 
0130 
0131 
0132 
0133 
0134 
0135 
0136 
0137 
0138 
0139 
0140 
0141 
0142 
0143 
0144 
0145 
0146 
0147 
0148 
0149 
0150 #define NPROC        64  
0151 #define KSTACKSIZE 4096  
0152 #define NCPU          8  
0153 #define NOFILE       16  
0154 #define NFILE       100  
0155 #define NINODE       50  
0156 #define NDEV         10  
0157 #define ROOTDEV       1  
0158 #define MAXARG       32  
0159 #define MAXOPBLOCKS  10  
0160 #define LOGSIZE      (MAXOPBLOCKS*3)  
0161 #define NBUF         (MAXOPBLOCKS*3)  
0162 #define FSSIZE       1000  
0163 
0164 
0165 
0166 
0167 
0168 
0169 
0170 
0171 
0172 
0173 
0174 
0175 
0176 
0177 
0178 
0179 
0180 
0181 
0182 
0183 
0184 
0185 
0186 
0187 
0188 
0189 
0190 
0191 
0192 
0193 
0194 
0195 
0196 
0197 
0198 
0199 
0200 
0201 
0202 #define EXTMEM  0x100000            
0203 #define PHYSTOP 0xE000000           
0204 #define DEVSPACE 0xFE000000         
0205 
0206 
0207 #define KERNBASE 0x80000000         
0208 #define KERNLINK (KERNBASE+EXTMEM)  
0209 
0210 #define V2P(a) (((uint) (a)) - KERNBASE)
0211 #define P2V(a) (((void *) (a)) + KERNBASE)
0212 
0213 #define V2P_WO(x) ((x) - KERNBASE)    
0214 #define P2V_WO(x) ((x) + KERNBASE)    
0215 
0216 
0217 
0218 
0219 
0220 
0221 
0222 
0223 
0224 
0225 
0226 
0227 
0228 
0229 
0230 
0231 
0232 
0233 
0234 
0235 
0236 
0237 
0238 
0239 
0240 
0241 
0242 
0243 
0244 
0245 
0246 
0247 
0248 
0249 
0250 struct buf;
0251 struct context;
0252 struct file;
0253 struct inode;
0254 struct pipe;
0255 struct proc;
0256 struct rtcdate;
0257 struct spinlock;
0258 struct sleeplock;
0259 struct stat;
0260 struct superblock;
0261 
0262 
0263 void            binit(void);
0264 struct buf*     bread(uint, uint);
0265 void            brelse(struct buf*);
0266 void            bwrite(struct buf*);
0267 
0268 
0269 void            consoleinit(void);
0270 void            cprintf(char*, ...);
0271 void            consoleintr(int(*)(void));
0272 void            panic(char*) __attribute__((noreturn));
0273 
0274 
0275 int             exec(char*, char**);
0276 
0277 
0278 struct file*    filealloc(void);
0279 void            fileclose(struct file*);
0280 struct file*    filedup(struct file*);
0281 void            fileinit(void);
0282 int             fileread(struct file*, char*, int n);
0283 int             filestat(struct file*, struct stat*);
0284 int             filewrite(struct file*, char*, int n);
0285 
0286 
0287 void            readsb(int dev, struct superblock *sb);
0288 int             dirlink(struct inode*, char*, uint);
0289 struct inode*   dirlookup(struct inode*, char*, uint*);
0290 struct inode*   ialloc(uint, short);
0291 struct inode*   idup(struct inode*);
0292 void            iinit(int dev);
0293 void            ilock(struct inode*);
0294 void            iput(struct inode*);
0295 void            iunlock(struct inode*);
0296 void            iunlockput(struct inode*);
0297 void            iupdate(struct inode*);
0298 int             namecmp(const char*, const char*);
0299 struct inode*   namei(char*);
0300 struct inode*   nameiparent(char*, char*);
0301 int             readi(struct inode*, char*, uint, uint);
0302 void            stati(struct inode*, struct stat*);
0303 int             writei(struct inode*, char*, uint, uint);
0304 
0305 
0306 void            ideinit(void);
0307 void            ideintr(void);
0308 void            iderw(struct buf*);
0309 
0310 
0311 void            ioapicenable(int irq, int cpu);
0312 extern uchar    ioapicid;
0313 void            ioapicinit(void);
0314 
0315 
0316 char*           kalloc(void);
0317 void            kfree(char*);
0318 void            kinit1(void*, void*);
0319 void            kinit2(void*, void*);
0320 
0321 
0322 void            kbdintr(void);
0323 
0324 
0325 void            cmostime(struct rtcdate *r);
0326 int             cpunum(void);
0327 extern volatile uint*    lapic;
0328 void            lapiceoi(void);
0329 void            lapicinit(void);
0330 void            lapicstartap(uchar, uint);
0331 void            microdelay(int);
0332 
0333 
0334 void            initlog(int dev);
0335 void            log_write(struct buf*);
0336 void            begin_op();
0337 void            end_op();
0338 
0339 
0340 extern int      ismp;
0341 void            mpinit(void);
0342 
0343 
0344 void            picenable(int);
0345 void            picinit(void);
0346 
0347 
0348 
0349 
0350 
0351 int             pipealloc(struct file**, struct file**);
0352 void            pipeclose(struct pipe*, int);
0353 int             piperead(struct pipe*, char*, int);
0354 int             pipewrite(struct pipe*, char*, int);
0355 
0356 
0357 
0358 void            exit(void);
0359 int             fork(void);
0360 int             growproc(int);
0361 int             kill(int);
0362 void            pinit(void);
0363 void            procdump(void);
0364 void            scheduler(void) __attribute__((noreturn));
0365 void            sched(void);
0366 void            sleep(void*, struct spinlock*);
0367 void            userinit(void);
0368 int             wait(void);
0369 void            wakeup(void*);
0370 void            yield(void);
0371 
0372 
0373 void            swtch(struct context**, struct context*);
0374 
0375 
0376 void            acquire(struct spinlock*);
0377 void            getcallerpcs(void*, uint*);
0378 int             holding(struct spinlock*);
0379 void            initlock(struct spinlock*, char*);
0380 void            release(struct spinlock*);
0381 void            pushcli(void);
0382 void            popcli(void);
0383 
0384 
0385 void            acquiresleep(struct sleeplock*);
0386 void             releasesleep(struct sleeplock*);
0387 int             holdingsleep(struct sleeplock*);
0388 void            initsleeplock(struct sleeplock*, char*);
0389 
0390 
0391 int             memcmp(const void*, const void*, uint);
0392 void*           memmove(void*, const void*, uint);
0393 void*           memset(void*, int, uint);
0394 char*           safestrcpy(char*, const char*, int);
0395 int             strlen(const char*);
0396 int             strncmp(const char*, const char*, uint);
0397 char*           strncpy(char*, const char*, int);
0398 
0399 
0400 
0401 int             argint(int, int*);
0402 int             argptr(int, char**, int);
0403 int             argstr(int, char**);
0404 int             fetchint(uint, int*);
0405 int             fetchstr(uint, char**);
0406 void            syscall(void);
0407 
0408 
0409 void            timerinit(void);
0410 
0411 
0412 void            idtinit(void);
0413 extern uint     ticks;
0414 void            tvinit(void);
0415 extern struct spinlock tickslock;
0416 
0417 
0418 void            uartinit(void);
0419 void            uartintr(void);
0420 void            uartputc(int);
0421 
0422 
0423 void            seginit(void);
0424 void            kvmalloc(void);
0425 pde_t*          setupkvm(void);
0426 char*           uva2ka(pde_t*, char*);
0427 int             allocuvm(pde_t*, uint, uint);
0428 int             deallocuvm(pde_t*, uint, uint);
0429 void            freevm(pde_t*);
0430 void            inituvm(pde_t*, char*, uint);
0431 int             loaduvm(pde_t*, char*, struct inode*, uint, uint);
0432 pde_t*          copyuvm(pde_t*, uint);
0433 void            switchuvm(struct proc*);
0434 void            switchkvm(void);
0435 int             copyout(pde_t*, uint, void*, uint);
0436 void            clearpteu(pde_t *pgdir, char *uva);
0437 
0438 
0439 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
0440 
0441 
0442 
0443 
0444 
0445 
0446 
0447 
0448 
0449 
0450 
0451 
0452 static inline uchar
0453 inb(ushort port)
0454 {
0455   uchar data;
0456 
0457   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
0458   return data;
0459 }
0460 
0461 static inline void
0462 insl(int port, void *addr, int cnt)
0463 {
0464   asm volatile("cld; rep insl" :
0465                "=D" (addr), "=c" (cnt) :
0466                "d" (port), "0" (addr), "1" (cnt) :
0467                "memory", "cc");
0468 }
0469 
0470 static inline void
0471 outb(ushort port, uchar data)
0472 {
0473   asm volatile("out %0,%1" : : "a" (data), "d" (port));
0474 }
0475 
0476 static inline void
0477 outw(ushort port, ushort data)
0478 {
0479   asm volatile("out %0,%1" : : "a" (data), "d" (port));
0480 }
0481 
0482 static inline void
0483 outsl(int port, const void *addr, int cnt)
0484 {
0485   asm volatile("cld; rep outsl" :
0486                "=S" (addr), "=c" (cnt) :
0487                "d" (port), "0" (addr), "1" (cnt) :
0488                "cc");
0489 }
0490 
0491 static inline void
0492 stosb(void *addr, int data, int cnt)
0493 {
0494   asm volatile("cld; rep stosb" :
0495                "=D" (addr), "=c" (cnt) :
0496                "0" (addr), "1" (cnt), "a" (data) :
0497                "memory", "cc");
0498 }
0499 
0500 static inline void
0501 stosl(void *addr, int data, int cnt)
0502 {
0503   asm volatile("cld; rep stosl" :
0504                "=D" (addr), "=c" (cnt) :
0505                "0" (addr), "1" (cnt), "a" (data) :
0506                "memory", "cc");
0507 }
0508 
0509 struct segdesc;
0510 
0511 static inline void
0512 lgdt(struct segdesc *p, int size)
0513 {
0514   volatile ushort pd[3];
0515 
0516   pd[0] = size-1;
0517   pd[1] = (uint)p;
0518   pd[2] = (uint)p >> 16;
0519 
0520   asm volatile("lgdt (%0)" : : "r" (pd));
0521 }
0522 
0523 struct gatedesc;
0524 
0525 static inline void
0526 lidt(struct gatedesc *p, int size)
0527 {
0528   volatile ushort pd[3];
0529 
0530   pd[0] = size-1;
0531   pd[1] = (uint)p;
0532   pd[2] = (uint)p >> 16;
0533 
0534   asm volatile("lidt (%0)" : : "r" (pd));
0535 }
0536 
0537 static inline void
0538 ltr(ushort sel)
0539 {
0540   asm volatile("ltr %0" : : "r" (sel));
0541 }
0542 
0543 static inline uint
0544 readeflags(void)
0545 {
0546   uint eflags;
0547   asm volatile("pushfl; popl %0" : "=r" (eflags));
0548   return eflags;
0549 }
0550 static inline void
0551 loadgs(ushort v)
0552 {
0553   asm volatile("movw %0, %%gs" : : "r" (v));
0554 }
0555 
0556 static inline void
0557 cli(void)
0558 {
0559   asm volatile("cli");
0560 }
0561 
0562 static inline void
0563 sti(void)
0564 {
0565   asm volatile("sti");
0566 }
0567 
0568 static inline uint
0569 xchg(volatile uint *addr, uint newval)
0570 {
0571   uint result;
0572 
0573   
0574   asm volatile("lock; xchgl %0, %1" :
0575                "+m" (*addr), "=a" (result) :
0576                "1" (newval) :
0577                "cc");
0578   return result;
0579 }
0580 
0581 static inline uint
0582 rcr2(void)
0583 {
0584   uint val;
0585   asm volatile("movl %%cr2,%0" : "=r" (val));
0586   return val;
0587 }
0588 
0589 static inline void
0590 lcr3(uint val)
0591 {
0592   asm volatile("movl %0,%%cr3" : : "r" (val));
0593 }
0594 
0595 
0596 
0597 
0598 
0599 
0600 
0601 
0602 struct trapframe {
0603   
0604   uint edi;
0605   uint esi;
0606   uint ebp;
0607   uint oesp;      
0608   uint ebx;
0609   uint edx;
0610   uint ecx;
0611   uint eax;
0612 
0613   
0614   ushort gs;
0615   ushort padding1;
0616   ushort fs;
0617   ushort padding2;
0618   ushort es;
0619   ushort padding3;
0620   ushort ds;
0621   ushort padding4;
0622   uint trapno;
0623 
0624   
0625   uint err;
0626   uint eip;
0627   ushort cs;
0628   ushort padding5;
0629   uint eflags;
0630 
0631   
0632   uint esp;
0633   ushort ss;
0634   ushort padding6;
0635 };
0636 
0637 
0638 
0639 
0640 
0641 
0642 
0643 
0644 
0645 
0646 
0647 
0648 
0649 
0650 
0651 
0652 
0653 
0654 #define SEG_NULLASM                                             \
0655         .word 0, 0;                                             \
0656         .byte 0, 0, 0, 0
0657 
0658 
0659 
0660 #define SEG_ASM(type,base,lim)                                  \
0661         .word (((lim) >> 12) & 0xffff), ((base) & 0xffff);      \
0662         .byte (((base) >> 16) & 0xff), (0x90 | (type)),         \
0663                 (0xC0 | (((lim) >> 28) & 0xf)), (((base) >> 24) & 0xff)
0664 
0665 #define STA_X     0x8       
0666 #define STA_E     0x4       
0667 #define STA_C     0x4       
0668 #define STA_W     0x2       
0669 #define STA_R     0x2       
0670 #define STA_A     0x1       
0671 
0672 
0673 
0674 
0675 
0676 
0677 
0678 
0679 
0680 
0681 
0682 
0683 
0684 
0685 
0686 
0687 
0688 
0689 
0690 
0691 
0692 
0693 
0694 
0695 
0696 
0697 
0698 
0699 
0700 
0701 
0702 
0703 
0704 #define FL_CF           0x00000001      
0705 #define FL_PF           0x00000004      
0706 #define FL_AF           0x00000010      
0707 #define FL_ZF           0x00000040      
0708 #define FL_SF           0x00000080      
0709 #define FL_TF           0x00000100      
0710 #define FL_IF           0x00000200      
0711 #define FL_DF           0x00000400      
0712 #define FL_OF           0x00000800      
0713 #define FL_IOPL_MASK    0x00003000      
0714 #define FL_IOPL_0       0x00000000      
0715 #define FL_IOPL_1       0x00001000      
0716 #define FL_IOPL_2       0x00002000      
0717 #define FL_IOPL_3       0x00003000      
0718 #define FL_NT           0x00004000      
0719 #define FL_RF           0x00010000      
0720 #define FL_VM           0x00020000      
0721 #define FL_AC           0x00040000      
0722 #define FL_VIF          0x00080000      
0723 #define FL_VIP          0x00100000      
0724 #define FL_ID           0x00200000      
0725 
0726 
0727 #define CR0_PE          0x00000001      
0728 #define CR0_MP          0x00000002      
0729 #define CR0_EM          0x00000004      
0730 #define CR0_TS          0x00000008      
0731 #define CR0_ET          0x00000010      
0732 #define CR0_NE          0x00000020      
0733 #define CR0_WP          0x00010000      
0734 #define CR0_AM          0x00040000      
0735 #define CR0_NW          0x20000000      
0736 #define CR0_CD          0x40000000      
0737 #define CR0_PG          0x80000000      
0738 
0739 #define CR4_PSE         0x00000010      
0740 
0741 
0742 #define SEG_KCODE 1  
0743 #define SEG_KDATA 2  
0744 #define SEG_KCPU  3  
0745 #define SEG_UCODE 4  
0746 #define SEG_UDATA 5  
0747 #define SEG_TSS   6  
0748 
0749 
0750 
0751 #define NSEGS     7
0752 
0753 
0754 
0755 
0756 
0757 
0758 
0759 
0760 
0761 
0762 
0763 
0764 
0765 
0766 
0767 
0768 
0769 
0770 
0771 
0772 
0773 
0774 
0775 
0776 
0777 
0778 
0779 
0780 
0781 
0782 
0783 
0784 
0785 
0786 
0787 
0788 
0789 
0790 
0791 
0792 
0793 
0794 
0795 
0796 
0797 
0798 
0799 
0800 #ifndef __ASSEMBLER__
0801 
0802 struct segdesc {
0803   uint lim_15_0 : 16;  
0804   uint base_15_0 : 16; 
0805   uint base_23_16 : 8; 
0806   uint type : 4;       
0807   uint s : 1;          
0808   uint dpl : 2;        
0809   uint p : 1;          
0810   uint lim_19_16 : 4;  
0811   uint avl : 1;        
0812   uint rsv1 : 1;       
0813   uint db : 1;         
0814   uint g : 1;          
0815   uint base_31_24 : 8; 
0816 };
0817 
0818 
0819 #define SEG(type, base, lim, dpl) (struct segdesc)    \
0820 { ((lim) >> 12) & 0xffff, (uint)(base) & 0xffff,      \
0821   ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
0822   (uint)(lim) >> 28, 0, 0, 1, 1, (uint)(base) >> 24 }
0823 #define SEG16(type, base, lim, dpl) (struct segdesc)  \
0824 { (lim) & 0xffff, (uint)(base) & 0xffff,              \
0825   ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
0826   (uint)(lim) >> 16, 0, 0, 1, 0, (uint)(base) >> 24 }
0827 #endif
0828 
0829 #define DPL_USER    0x3     
0830 
0831 
0832 #define STA_X       0x8     
0833 #define STA_E       0x4     
0834 #define STA_C       0x4     
0835 #define STA_W       0x2     
0836 #define STA_R       0x2     
0837 #define STA_A       0x1     
0838 
0839 
0840 #define STS_T16A    0x1     
0841 #define STS_LDT     0x2     
0842 #define STS_T16B    0x3     
0843 #define STS_CG16    0x4     
0844 #define STS_TG      0x5     
0845 #define STS_IG16    0x6     
0846 #define STS_TG16    0x7     
0847 #define STS_T32A    0x9     
0848 #define STS_T32B    0xB     
0849 #define STS_CG32    0xC     
0850 #define STS_IG32    0xE     
0851 #define STS_TG32    0xF     
0852 
0853 
0854 
0855 
0856 
0857 
0858 
0859 
0860 
0861 
0862 #define PDX(va)         (((uint)(va) >> PDXSHIFT) & 0x3FF)
0863 
0864 
0865 #define PTX(va)         (((uint)(va) >> PTXSHIFT) & 0x3FF)
0866 
0867 
0868 #define PGADDR(d, t, o) ((uint)((d) << PDXSHIFT | (t) << PTXSHIFT | (o)))
0869 
0870 
0871 #define NPDENTRIES      1024    
0872 #define NPTENTRIES      1024    
0873 #define PGSIZE          4096    
0874 
0875 #define PGSHIFT         12      
0876 #define PTXSHIFT        12      
0877 #define PDXSHIFT        22      
0878 
0879 #define PGROUNDUP(sz)  (((sz)+PGSIZE-1) & ~(PGSIZE-1))
0880 #define PGROUNDDOWN(a) (((a)) & ~(PGSIZE-1))
0881 
0882 
0883 #define PTE_P           0x001   
0884 #define PTE_W           0x002   
0885 #define PTE_U           0x004   
0886 #define PTE_PWT         0x008   
0887 #define PTE_PCD         0x010   
0888 #define PTE_A           0x020   
0889 #define PTE_D           0x040   
0890 #define PTE_PS          0x080   
0891 #define PTE_MBZ         0x180   
0892 
0893 
0894 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
0895 #define PTE_FLAGS(pte)  ((uint)(pte) &  0xFFF)
0896 
0897 #ifndef __ASSEMBLER__
0898 typedef uint pte_t;
0899 
0900 
0901 struct taskstate {
0902   uint link;         
0903   uint esp0;         
0904   ushort ss0;        
0905   ushort padding1;
0906   uint *esp1;
0907   ushort ss1;
0908   ushort padding2;
0909   uint *esp2;
0910   ushort ss2;
0911   ushort padding3;
0912   void *cr3;         
0913   uint *eip;         
0914   uint eflags;
0915   uint eax;          
0916   uint ecx;
0917   uint edx;
0918   uint ebx;
0919   uint *esp;
0920   uint *ebp;
0921   uint esi;
0922   uint edi;
0923   ushort es;         
0924   ushort padding4;
0925   ushort cs;
0926   ushort padding5;
0927   ushort ss;
0928   ushort padding6;
0929   ushort ds;
0930   ushort padding7;
0931   ushort fs;
0932   ushort padding8;
0933   ushort gs;
0934   ushort padding9;
0935   ushort ldt;
0936   ushort padding10;
0937   ushort t;          
0938   ushort iomb;       
0939 };
0940 
0941 
0942 
0943 
0944 
0945 
0946 
0947 
0948 
0949 
0950 
0951 struct gatedesc {
0952   uint off_15_0 : 16;   
0953   uint cs : 16;         
0954   uint args : 5;        
0955   uint rsv1 : 3;        
0956   uint type : 4;        
0957   uint s : 1;           
0958   uint dpl : 2;         
0959   uint p : 1;           
0960   uint off_31_16 : 16;  
0961 };
0962 
0963 
0964 
0965 
0966 
0967 
0968 
0969 
0970 
0971 #define SETGATE(gate, istrap, sel, off, d)                \
0972 {                                                         \
0973   (gate).off_15_0 = (uint)(off) & 0xffff;                \
0974   (gate).cs = (sel);                                      \
0975   (gate).args = 0;                                        \
0976   (gate).rsv1 = 0;                                        \
0977   (gate).type = (istrap) ? STS_TG32 : STS_IG32;           \
0978   (gate).s = 0;                                           \
0979   (gate).dpl = (d);                                       \
0980   (gate).p = 1;                                           \
0981   (gate).off_31_16 = (uint)(off) >> 16;                  \
0982 }
0983 
0984 #endif
0985 
0986 
0987 
0988 
0989 
0990 
0991 
0992 
0993 
0994 
0995 
0996 
0997 
0998 
0999 
1000 
1001 
1002 #define ELF_MAGIC 0x464C457FU  
1003 
1004 
1005 struct elfhdr {
1006   uint magic;  
1007   uchar elf[12];
1008   ushort type;
1009   ushort machine;
1010   uint version;
1011   uint entry;
1012   uint phoff;
1013   uint shoff;
1014   uint flags;
1015   ushort ehsize;
1016   ushort phentsize;
1017   ushort phnum;
1018   ushort shentsize;
1019   ushort shnum;
1020   ushort shstrndx;
1021 };
1022 
1023 
1024 struct proghdr {
1025   uint type;
1026   uint off;
1027   uint vaddr;
1028   uint paddr;
1029   uint filesz;
1030   uint memsz;
1031   uint flags;
1032   uint align;
1033 };
1034 
1035 
1036 #define ELF_PROG_LOAD           1
1037 
1038 
1039 #define ELF_PROG_FLAG_EXEC      1
1040 #define ELF_PROG_FLAG_WRITE     2
1041 #define ELF_PROG_FLAG_READ      4
1042 
1043 
1044 
1045 
1046 
1047 
1048 
1049 
1050 
1051 
1052 
1053 
1054 
1055 
1056 
1057 
1058 
1059 
1060 
1061 
1062 
1063 
1064 
1065 
1066 
1067 
1068 
1069 
1070 
1071 
1072 
1073 
1074 
1075 
1076 
1077 
1078 
1079 
1080 
1081 
1082 
1083 
1084 
1085 
1086 
1087 
1088 
1089 
1090 
1091 
1092 
1093 
1094 
1095 
1096 
1097 
1098 
1099 
1100 
1101 
1102 
1103 
1104 
1105 
1106 
1107 
1108 
1109 
1110 
1111 
1112 
1113 
1114 
1115 
1116 
1117 
1118 
1119 
1120 
1121 
1122 
1123 
1124 
1125 
1126 .p2align 2
1127 .text
1128 .globl multiboot_header
1129 multiboot_header:
1130   
1131   
1132   .long magic
1133   .long flags
1134   .long (-magic-flags)
1135 
1136 
1137 
1138 
1139 .globl _start
1140 _start = V2P_WO(entry)
1141 
1142 
1143 .globl entry
1144 entry:
1145   
1146   movl    %cr4, %eax
1147   orl     $(CR4_PSE), %eax
1148   movl    %eax, %cr4
1149   
1150   movl    $(V2P_WO(entrypgdir)), %eax
1151   movl    %eax, %cr3
1152   
1153   movl    %cr0, %eax
1154   orl     $(CR0_PG|CR0_WP), %eax
1155   movl    %eax, %cr0
1156 
1157   
1158   movl $(stack + KSTACKSIZE), %esp
1159 
1160   
1161   
1162   
1163   
1164   mov $main, %eax
1165   jmp *%eax
1166 
1167 .comm stack, KSTACKSIZE
1168 
1169 
1170 
1171 
1172 
1173 
1174 
1175 
1176 
1177 
1178 
1179 
1180 
1181 
1182 
1183 
1184 
1185 
1186 
1187 
1188 
1189 
1190 
1191 
1192 
1193 
1194 
1195 
1196 
1197 
1198 
1199 
1200 
1201 
1202 
1203 
1204 
1205 
1206 
1207 
1208 
1209 
1210 
1211 
1212 
1213 
1214 
1215 
1216 
1217 
1218 
1219 
1220 
1221 .code16
1222 .globl start
1223 start:
1224   cli
1225 
1226   
1227   xorw    %ax,%ax
1228   movw    %ax,%ds
1229   movw    %ax,%es
1230   movw    %ax,%ss
1231 
1232   
1233   
1234   
1235   lgdt    gdtdesc
1236   movl    %cr0, %eax
1237   orl     $CR0_PE, %eax
1238   movl    %eax, %cr0
1239 
1240   
1241   
1242   
1243   ljmpl    $(SEG_KCODE<<3), $(start32)
1244 
1245 
1246 
1247 
1248 
1249 
1250 .code32  
1251 start32:
1252   
1253   movw    $(SEG_KDATA<<3), %ax    
1254   movw    %ax, %ds                
1255   movw    %ax, %es                
1256   movw    %ax, %ss                
1257   movw    $0, %ax                 
1258   movw    %ax, %fs                
1259   movw    %ax, %gs                
1260 
1261   
1262   movl    %cr4, %eax
1263   orl     $(CR4_PSE), %eax
1264   movl    %eax, %cr4
1265   
1266   movl    (start-12), %eax
1267   movl    %eax, %cr3
1268   
1269   movl    %cr0, %eax
1270   orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
1271   movl    %eax, %cr0
1272 
1273   
1274   movl    (start-4), %esp
1275   
1276   call	 *(start-8)
1277 
1278   movw    $0x8a00, %ax
1279   movw    %ax, %dx
1280   outw    %ax, %dx
1281   movw    $0x8ae0, %ax
1282   outw    %ax, %dx
1283 spin:
1284   jmp     spin
1285 
1286 .p2align 2
1287 gdt:
1288   SEG_NULLASM
1289   SEG_ASM(STA_X|STA_R, 0, 0xffffffff)
1290   SEG_ASM(STA_W, 0, 0xffffffff)
1291 
1292 
1293 gdtdesc:
1294   .word   (gdtdesc - gdt - 1)
1295   .long   gdt
1296 
1297 
1298 
1299 
1300 #include "types.h"
1301 #include "defs.h"
1302 #include "param.h"
1303 #include "memlayout.h"
1304 #include "mmu.h"
1305 #include "proc.h"
1306 #include "x86.h"
1307 
1308 static void startothers(void);
1309 static void mpmain(void)  __attribute__((noreturn));
1310 extern pde_t *kpgdir;
1311 extern char end[]; 
1312 
1313 
1314 
1315 
1316 int
1317 main(void)
1318 {
1319   kinit1(end, P2V(4*1024*1024)); 
1320   kvmalloc();      
1321   mpinit();        
1322   lapicinit();     
1323   seginit();       
1324   cprintf("\ncpu%d: starting xv6\n\n", cpunum());
1325   picinit();       
1326   ioapicinit();    
1327   consoleinit();   
1328   uartinit();      
1329   pinit();         
1330   tvinit();        
1331   binit();         
1332   fileinit();      
1333   ideinit();       
1334   if(!ismp)
1335     timerinit();   
1336   startothers();   
1337   kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); 
1338   userinit();      
1339   mpmain();        
1340 }
1341 
1342 
1343 
1344 
1345 
1346 
1347 
1348 
1349 
1350 
1351 static void
1352 mpenter(void)
1353 {
1354   switchkvm();
1355   seginit();
1356   lapicinit();
1357   mpmain();
1358 }
1359 
1360 
1361 static void
1362 mpmain(void)
1363 {
1364   cprintf("cpu%d: starting\n", cpunum());
1365   idtinit();       
1366   xchg(&cpu->started, 1); 
1367   scheduler();     
1368 }
1369 
1370 pde_t entrypgdir[];  
1371 
1372 
1373 static void
1374 startothers(void)
1375 {
1376   extern uchar _binary_entryother_start[], _binary_entryother_size[];
1377   uchar *code;
1378   struct cpu *c;
1379   char *stack;
1380 
1381   
1382   
1383   
1384   code = P2V(0x7000);
1385   memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
1386 
1387   for(c = cpus; c < cpus+ncpu; c++){
1388     if(c == cpus+cpunum())  
1389       continue;
1390 
1391     
1392     
1393     
1394     stack = kalloc();
1395     *(void**)(code-4) = stack + KSTACKSIZE;
1396     *(void**)(code-8) = mpenter;
1397     *(int**)(code-12) = (void *) V2P(entrypgdir);
1398 
1399     lapicstartap(c->apicid, V2P(code));
1400     
1401     while(c->started == 0)
1402       ;
1403   }
1404 }
1405 
1406 
1407 
1408 
1409 
1410 
1411 __attribute__((__aligned__(PGSIZE)))
1412 pde_t entrypgdir[NPDENTRIES] = {
1413   
1414   [0] = (0) | PTE_P | PTE_W | PTE_PS,
1415   
1416   [KERNBASE>>PDXSHIFT] = (0) | PTE_P | PTE_W | PTE_PS,
1417 };
1418 
1419 
1420 
1421 
1422 
1423 
1424 
1425 
1426 
1427 
1428 
1429 
1430 
1431 
1432 
1433 
1434 
1435 
1436 
1437 
1438 
1439 
1440 
1441 
1442 
1443 
1444 
1445 
1446 
1447 
1448 
1449 
1450 
1451 
1452 
1453 
1454 
1455 
1456 
1457 
1458 
1459 
1460 
1461 
1462 
1463 
1464 
1465 
1466 
1467 
1468 
1469 
1470 
1471 
1472 
1473 
1474 
1475 
1476 
1477 
1478 
1479 
1480 
1481 
1482 
1483 
1484 
1485 
1486 
1487 
1488 
1489 
1490 
1491 
1492 
1493 
1494 
1495 
1496 
1497 
1498 
1499 
1500 
1501 struct spinlock {
1502   uint locked;       
1503 
1504   
1505   char *name;        
1506   struct cpu *cpu;   
1507   uint pcs[10];      
1508                      
1509 };
1510 
1511 
1512 
1513 
1514 
1515 
1516 
1517 
1518 
1519 
1520 
1521 
1522 
1523 
1524 
1525 
1526 
1527 
1528 
1529 
1530 
1531 
1532 
1533 
1534 
1535 
1536 
1537 
1538 
1539 
1540 
1541 
1542 
1543 
1544 
1545 
1546 
1547 
1548 
1549 
1550 
1551 
1552 #include "types.h"
1553 #include "defs.h"
1554 #include "param.h"
1555 #include "x86.h"
1556 #include "memlayout.h"
1557 #include "mmu.h"
1558 #include "proc.h"
1559 #include "spinlock.h"
1560 
1561 void
1562 initlock(struct spinlock *lk, char *name)
1563 {
1564   lk->name = name;
1565   lk->locked = 0;
1566   lk->cpu = 0;
1567 }
1568 
1569 
1570 
1571 
1572 
1573 void
1574 acquire(struct spinlock *lk)
1575 {
1576   pushcli(); 
1577   if(holding(lk))
1578     panic("acquire");
1579 
1580   
1581   while(xchg(&lk->locked, 1) != 0)
1582     ;
1583 
1584   
1585   
1586   
1587   __sync_synchronize();
1588 
1589   
1590   lk->cpu = cpu;
1591   getcallerpcs(&lk, lk->pcs);
1592 }
1593 
1594 
1595 
1596 
1597 
1598 
1599 
1600 
1601 void
1602 release(struct spinlock *lk)
1603 {
1604   if(!holding(lk))
1605     panic("release");
1606 
1607   lk->pcs[0] = 0;
1608   lk->cpu = 0;
1609 
1610   
1611   
1612   
1613   
1614   
1615   __sync_synchronize();
1616 
1617   
1618   
1619   
1620   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
1621 
1622   popcli();
1623 }
1624 
1625 
1626 void
1627 getcallerpcs(void *v, uint pcs[])
1628 {
1629   uint *ebp;
1630   int i;
1631 
1632   ebp = (uint*)v - 2;
1633   for(i = 0; i < 10; i++){
1634     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
1635       break;
1636     pcs[i] = ebp[1];     
1637     ebp = (uint*)ebp[0]; 
1638   }
1639   for(; i < 10; i++)
1640     pcs[i] = 0;
1641 }
1642 
1643 
1644 int
1645 holding(struct spinlock *lock)
1646 {
1647   return lock->locked && lock->cpu == cpu;
1648 }
1649 
1650 
1651 
1652 
1653 
1654 void
1655 pushcli(void)
1656 {
1657   int eflags;
1658 
1659   eflags = readeflags();
1660   cli();
1661   if(cpu->ncli == 0)
1662     cpu->intena = eflags & FL_IF;
1663   cpu->ncli += 1;
1664 }
1665 
1666 void
1667 popcli(void)
1668 {
1669   if(readeflags()&FL_IF)
1670     panic("popcli - interruptible");
1671   if(--cpu->ncli < 0)
1672     panic("popcli");
1673   if(cpu->ncli == 0 && cpu->intena)
1674     sti();
1675 }
1676 
1677 
1678 
1679 
1680 
1681 
1682 
1683 
1684 
1685 
1686 
1687 
1688 
1689 
1690 
1691 
1692 
1693 
1694 
1695 
1696 
1697 
1698 
1699 
1700 #include "param.h"
1701 #include "types.h"
1702 #include "defs.h"
1703 #include "x86.h"
1704 #include "memlayout.h"
1705 #include "mmu.h"
1706 #include "proc.h"
1707 #include "elf.h"
1708 
1709 extern char data[];  
1710 pde_t *kpgdir;  
1711 
1712 
1713 
1714 void
1715 seginit(void)
1716 {
1717   struct cpu *c;
1718 
1719   
1720   
1721   
1722   
1723   c = &cpus[cpunum()];
1724   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
1725   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
1726   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
1727   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
1728 
1729   
1730   c->gdt[SEG_KCPU] = SEG(STA_W, &c->cpu, 8, 0);
1731 
1732   lgdt(c->gdt, sizeof(c->gdt));
1733   loadgs(SEG_KCPU << 3);
1734 
1735   
1736   cpu = c;
1737   proc = 0;
1738 }
1739 
1740 
1741 
1742 
1743 
1744 
1745 
1746 
1747 
1748 
1749 
1750 
1751 
1752 
1753 static pte_t *
1754 walkpgdir(pde_t *pgdir, const void *va, int alloc)
1755 {
1756   pde_t *pde;
1757   pte_t *pgtab;
1758 
1759   pde = &pgdir[PDX(va)];
1760   if(*pde & PTE_P){
1761     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
1762   } else {
1763     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
1764       return 0;
1765     
1766     memset(pgtab, 0, PGSIZE);
1767     
1768     
1769     
1770     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
1771   }
1772   return &pgtab[PTX(va)];
1773 }
1774 
1775 
1776 
1777 
1778 static int
1779 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
1780 {
1781   char *a, *last;
1782   pte_t *pte;
1783 
1784   a = (char*)PGROUNDDOWN((uint)va);
1785   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
1786   for(;;){
1787     if((pte = walkpgdir(pgdir, a, 1)) == 0)
1788       return -1;
1789     if(*pte & PTE_P)
1790       panic("remap");
1791     *pte = pa | perm | PTE_P;
1792     if(a == last)
1793       break;
1794     a += PGSIZE;
1795     pa += PGSIZE;
1796   }
1797   return 0;
1798 }
1799 
1800 
1801 
1802 
1803 
1804 
1805 
1806 
1807 
1808 
1809 
1810 
1811 
1812 
1813 
1814 
1815 
1816 
1817 
1818 
1819 
1820 
1821 
1822 
1823 static struct kmap {
1824   void *virt;
1825   uint phys_start;
1826   uint phys_end;
1827   int perm;
1828 } kmap[] = {
1829  { (void*)KERNBASE, 0,             EXTMEM,    PTE_W}, 
1830  { (void*)KERNLINK, V2P(KERNLINK), V2P(data), 0},     
1831  { (void*)data,     V2P(data),     PHYSTOP,   PTE_W}, 
1832  { (void*)DEVSPACE, DEVSPACE,      0,         PTE_W}, 
1833 };
1834 
1835 
1836 pde_t*
1837 setupkvm(void)
1838 {
1839   pde_t *pgdir;
1840   struct kmap *k;
1841 
1842   if((pgdir = (pde_t*)kalloc()) == 0)
1843     return 0;
1844   memset(pgdir, 0, PGSIZE);
1845   if (P2V(PHYSTOP) > (void*)DEVSPACE)
1846     panic("PHYSTOP too high");
1847   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
1848     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
1849                 (uint)k->phys_start, k->perm) < 0)
1850       return 0;
1851   return pgdir;
1852 }
1853 
1854 
1855 
1856 void
1857 kvmalloc(void)
1858 {
1859   kpgdir = setupkvm();
1860   switchkvm();
1861 }
1862 
1863 
1864 
1865 void
1866 switchkvm(void)
1867 {
1868   lcr3(V2P(kpgdir));   
1869 }
1870 
1871 
1872 void
1873 switchuvm(struct proc *p)
1874 {
1875   pushcli();
1876   cpu->gdt[SEG_TSS] = SEG16(STS_T32A, &cpu->ts, sizeof(cpu->ts)-1, 0);
1877   cpu->gdt[SEG_TSS].s = 0;
1878   cpu->ts.ss0 = SEG_KDATA << 3;
1879   cpu->ts.esp0 = (uint)proc->kstack + KSTACKSIZE;
1880   
1881   
1882   cpu->ts.iomb = (ushort) 0xFFFF;
1883   ltr(SEG_TSS << 3);
1884   if(p->pgdir == 0)
1885     panic("switchuvm: no pgdir");
1886   lcr3(V2P(p->pgdir));  
1887   popcli();
1888 }
1889 
1890 
1891 
1892 
1893 
1894 
1895 
1896 
1897 
1898 
1899 
1900 
1901 
1902 void
1903 inituvm(pde_t *pgdir, char *init, uint sz)
1904 {
1905   char *mem;
1906 
1907   if(sz >= PGSIZE)
1908     panic("inituvm: more than a page");
1909   mem = kalloc();
1910   memset(mem, 0, PGSIZE);
1911   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
1912   memmove(mem, init, sz);
1913 }
1914 
1915 
1916 
1917 int
1918 loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
1919 {
1920   uint i, pa, n;
1921   pte_t *pte;
1922 
1923   if((uint) addr % PGSIZE != 0)
1924     panic("loaduvm: addr must be page aligned");
1925   for(i = 0; i < sz; i += PGSIZE){
1926     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
1927       panic("loaduvm: address should exist");
1928     pa = PTE_ADDR(*pte);
1929     if(sz - i < PGSIZE)
1930       n = sz - i;
1931     else
1932       n = PGSIZE;
1933     if(readi(ip, P2V(pa), offset+i, n) != n)
1934       return -1;
1935   }
1936   return 0;
1937 }
1938 
1939 
1940 
1941 
1942 
1943 
1944 
1945 
1946 
1947 
1948 
1949 
1950 
1951 
1952 int
1953 allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
1954 {
1955   char *mem;
1956   uint a;
1957 
1958   if(newsz >= KERNBASE)
1959     return 0;
1960   if(newsz < oldsz)
1961     return oldsz;
1962 
1963   a = PGROUNDUP(oldsz);
1964   for(; a < newsz; a += PGSIZE){
1965     mem = kalloc();
1966     if(mem == 0){
1967       cprintf("allocuvm out of memory\n");
1968       deallocuvm(pgdir, newsz, oldsz);
1969       return 0;
1970     }
1971     memset(mem, 0, PGSIZE);
1972     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
1973       cprintf("allocuvm out of memory (2)\n");
1974       deallocuvm(pgdir, newsz, oldsz);
1975       kfree(mem);
1976       return 0;
1977     }
1978   }
1979   return newsz;
1980 }
1981 
1982 
1983 
1984 
1985 
1986 int
1987 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
1988 {
1989   pte_t *pte;
1990   uint a, pa;
1991 
1992   if(newsz >= oldsz)
1993     return oldsz;
1994 
1995   a = PGROUNDUP(newsz);
1996   for(; a  < oldsz; a += PGSIZE){
1997     pte = walkpgdir(pgdir, (char*)a, 0);
1998     if(!pte)
1999       a += (NPTENTRIES - 1) * PGSIZE;
2000     else if((*pte & PTE_P) != 0){
2001       pa = PTE_ADDR(*pte);
2002       if(pa == 0)
2003         panic("kfree");
2004       char *v = P2V(pa);
2005       kfree(v);
2006       *pte = 0;
2007     }
2008   }
2009   return newsz;
2010 }
2011 
2012 
2013 
2014 void
2015 freevm(pde_t *pgdir)
2016 {
2017   uint i;
2018 
2019   if(pgdir == 0)
2020     panic("freevm: no pgdir");
2021   deallocuvm(pgdir, KERNBASE, 0);
2022   for(i = 0; i < NPDENTRIES; i++){
2023     if(pgdir[i] & PTE_P){
2024       char * v = P2V(PTE_ADDR(pgdir[i]));
2025       kfree(v);
2026     }
2027   }
2028   kfree((char*)pgdir);
2029 }
2030 
2031 
2032 
2033 void
2034 clearpteu(pde_t *pgdir, char *uva)
2035 {
2036   pte_t *pte;
2037 
2038   pte = walkpgdir(pgdir, uva, 0);
2039   if(pte == 0)
2040     panic("clearpteu");
2041   *pte &= ~PTE_U;
2042 }
2043 
2044 
2045 
2046 
2047 
2048 
2049 
2050 
2051 
2052 pde_t*
2053 copyuvm(pde_t *pgdir, uint sz)
2054 {
2055   pde_t *d;
2056   pte_t *pte;
2057   uint pa, i, flags;
2058   char *mem;
2059 
2060   if((d = setupkvm()) == 0)
2061     return 0;
2062   for(i = 0; i < sz; i += PGSIZE){
2063     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
2064       panic("copyuvm: pte should exist");
2065     if(!(*pte & PTE_P))
2066       panic("copyuvm: page not present");
2067     pa = PTE_ADDR(*pte);
2068     flags = PTE_FLAGS(*pte);
2069     if((mem = kalloc()) == 0)
2070       goto bad;
2071     memmove(mem, (char*)P2V(pa), PGSIZE);
2072     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0)
2073       goto bad;
2074   }
2075   return d;
2076 
2077 bad:
2078   freevm(d);
2079   return 0;
2080 }
2081 
2082 
2083 
2084 
2085 
2086 
2087 
2088 
2089 
2090 
2091 
2092 
2093 
2094 
2095 
2096 
2097 
2098 
2099 
2100 
2101 char*
2102 uva2ka(pde_t *pgdir, char *uva)
2103 {
2104   pte_t *pte;
2105 
2106   pte = walkpgdir(pgdir, uva, 0);
2107   if((*pte & PTE_P) == 0)
2108     return 0;
2109   if((*pte & PTE_U) == 0)
2110     return 0;
2111   return (char*)P2V(PTE_ADDR(*pte));
2112 }
2113 
2114 
2115 
2116 
2117 int
2118 copyout(pde_t *pgdir, uint va, void *p, uint len)
2119 {
2120   char *buf, *pa0;
2121   uint n, va0;
2122 
2123   buf = (char*)p;
2124   while(len > 0){
2125     va0 = (uint)PGROUNDDOWN(va);
2126     pa0 = uva2ka(pgdir, (char*)va0);
2127     if(pa0 == 0)
2128       return -1;
2129     n = PGSIZE - (va - va0);
2130     if(n > len)
2131       n = len;
2132     memmove(pa0 + (va - va0), buf, n);
2133     len -= n;
2134     buf += n;
2135     va = va0 + PGSIZE;
2136   }
2137   return 0;
2138 }
2139 
2140 
2141 
2142 
2143 
2144 
2145 
2146 
2147 
2148 
2149 
2150 
2151 
2152 
2153 
2154 
2155 
2156 
2157 
2158 
2159 
2160 
2161 
2162 
2163 
2164 
2165 
2166 
2167 
2168 
2169 
2170 
2171 
2172 
2173 
2174 
2175 
2176 
2177 
2178 
2179 
2180 
2181 
2182 
2183 
2184 
2185 
2186 
2187 
2188 
2189 
2190 
2191 
2192 
2193 
2194 
2195 
2196 
2197 
2198 
2199 
2200 
2201 
2202 
2203 
2204 
2205 
2206 
2207 
2208 
2209 
2210 
2211 
2212 
2213 
2214 
2215 
2216 
2217 
2218 
2219 
2220 
2221 
2222 
2223 
2224 
2225 
2226 
2227 
2228 
2229 
2230 
2231 
2232 
2233 
2234 
2235 
2236 
2237 
2238 
2239 
2240 
2241 
2242 
2243 
2244 
2245 
2246 
2247 
2248 
2249 
2250 
2251 
2252 
2253 
2254 
2255 
2256 
2257 
2258 
2259 
2260 
2261 
2262 
2263 
2264 
2265 
2266 
2267 
2268 
2269 
2270 
2271 
2272 
2273 
2274 
2275 
2276 
2277 
2278 
2279 
2280 
2281 
2282 
2283 
2284 
2285 
2286 
2287 
2288 
2289 
2290 
2291 
2292 
2293 
2294 
2295 
2296 
2297 
2298 
2299 
2300 
2301 struct cpu {
2302   uchar apicid;                
2303   struct context *scheduler;   
2304   struct taskstate ts;         
2305   struct segdesc gdt[NSEGS];   
2306   volatile uint started;       
2307   int ncli;                    
2308   int intena;                  
2309 
2310   
2311   struct cpu *cpu;
2312   struct proc *proc;           
2313 };
2314 
2315 extern struct cpu cpus[NCPU];
2316 extern int ncpu;
2317 
2318 
2319 
2320 
2321 
2322 
2323 
2324 
2325 
2326 extern struct cpu *cpu asm("%gs:0");       
2327 extern struct proc *proc asm("%gs:4");     
2328 
2329 
2330 
2331 
2332 
2333 
2334 
2335 
2336 
2337 
2338 
2339 
2340 struct context {
2341   uint edi;
2342   uint esi;
2343   uint ebx;
2344   uint ebp;
2345   uint eip;
2346 };
2347 
2348 
2349 
2350 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
2351 
2352 
2353 struct proc {
2354   uint sz;                     
2355   pde_t* pgdir;                
2356   char *kstack;                
2357   enum procstate state;        
2358   int pid;                     
2359   struct proc *parent;         
2360   struct trapframe *tf;        
2361   struct context *context;     
2362   void *chan;                  
2363   int killed;                  
2364   struct file *ofile[NOFILE];  
2365   struct inode *cwd;           
2366   char name[16];               
2367   int ctime;                   
2368   int etime;                   
2369   int rtime;                   
2370 };
2371 
2372 
2373 
2374 
2375 
2376 
2377 
2378 
2379 
2380 
2381 
2382 
2383 
2384 
2385 
2386 
2387 
2388 
2389 
2390 
2391 
2392 
2393 
2394 
2395 
2396 
2397 
2398 
2399 
2400 #include "types.h"
2401 #include "defs.h"
2402 #include "param.h"
2403 #include "memlayout.h"
2404 #include "mmu.h"
2405 #include "x86.h"
2406 #include "proc.h"
2407 #include "spinlock.h"
2408 
2409 struct {
2410   struct spinlock lock;
2411   struct proc proc[NPROC];
2412 } ptable;
2413 
2414 static struct proc *initproc;
2415 
2416 int nextpid = 1;
2417 extern void forkret(void);
2418 extern void trapret(void);
2419 
2420 static void wakeup1(void *chan);
2421 
2422 void
2423 pinit(void)
2424 {
2425   initlock(&ptable.lock, "ptable");
2426 }
2427 
2428 
2429 
2430 
2431 
2432 
2433 
2434 
2435 
2436 
2437 
2438 
2439 
2440 
2441 
2442 
2443 
2444 
2445 
2446 
2447 
2448 
2449 
2450 
2451 
2452 
2453 
2454 static struct proc*
2455 allocproc(void)
2456 {
2457   struct proc *p;
2458   char *sp;
2459 
2460   acquire(&ptable.lock);
2461 
2462   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
2463     if(p->state == UNUSED)
2464       goto found;
2465 
2466   release(&ptable.lock);
2467   return 0;
2468 
2469 found:
2470   p->state = EMBRYO;
2471   p->pid = nextpid++;
2472   p->rtime=0;
2473   p->ctime = ticks; 
2474 
2475   release(&ptable.lock);
2476 
2477   
2478   if((p->kstack = kalloc()) == 0){
2479     p->state = UNUSED;
2480     return 0;
2481   }
2482   sp = p->kstack + KSTACKSIZE;
2483 
2484   
2485   sp -= sizeof *p->tf;
2486   p->tf = (struct trapframe*)sp;
2487 
2488   
2489   
2490   sp -= 4;
2491   *(uint*)sp = (uint)trapret;
2492 
2493   sp -= sizeof *p->context;
2494   p->context = (struct context*)sp;
2495   memset(p->context, 0, sizeof *p->context);
2496   p->context->eip = (uint)forkret;
2497 
2498   return p;
2499 }
2500 
2501 
2502 void
2503 userinit(void)
2504 {
2505 
2506   struct proc *p;
2507   extern char _binary_initcode_start[], _binary_initcode_size[];
2508 
2509   p = allocproc();
2510 
2511   initproc = p;
2512   if((p->pgdir = setupkvm()) == 0)
2513     panic("user init: out of memory?");
2514   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
2515   p->sz = PGSIZE;
2516   memset(p->tf, 0, sizeof(*p->tf));
2517   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
2518   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
2519   p->tf->es = p->tf->ds;
2520   p->tf->ss = p->tf->ds;
2521   p->tf->eflags = FL_IF;
2522   p->tf->esp = PGSIZE;
2523   p->tf->eip = 0;  
2524 
2525   safestrcpy(p->name, "initcode", sizeof(p->name));
2526   p->cwd = namei("/");
2527 
2528   
2529   
2530   
2531   
2532   acquire(&ptable.lock);
2533 
2534   p->state = RUNNABLE;
2535 
2536   release(&ptable.lock);
2537 }
2538 
2539 
2540 
2541 
2542 
2543 
2544 
2545 
2546 
2547 
2548 
2549 
2550 
2551 
2552 int
2553 growproc(int n)
2554 {
2555   uint sz;
2556 
2557   sz = proc->sz;
2558   if(n > 0){
2559     if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
2560       return -1;
2561   } else if(n < 0){
2562     if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
2563       return -1;
2564   }
2565   proc->sz = sz;
2566   switchuvm(proc);
2567   return 0;
2568 }
2569 
2570 
2571 
2572 
2573 int
2574 fork(void)
2575 {
2576   int i, pid;
2577   struct proc *np;
2578 
2579   
2580   if((np = allocproc()) == 0){
2581     return -1;
2582   }
2583 
2584   
2585   if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
2586     kfree(np->kstack);
2587     np->kstack = 0;
2588     np->state = UNUSED;
2589     return -1;
2590   }
2591   np->sz = proc->sz;
2592   np->parent = proc;
2593   *np->tf = *proc->tf;
2594 
2595   
2596   np->tf->eax = 0;
2597 
2598 
2599 
2600   for(i = 0; i < NOFILE; i++)
2601     if(proc->ofile[i])
2602       np->ofile[i] = filedup(proc->ofile[i]);
2603   np->cwd = idup(proc->cwd);
2604 
2605   safestrcpy(np->name, proc->name, sizeof(proc->name));
2606 
2607   pid = np->pid;
2608 
2609   acquire(&ptable.lock);
2610 
2611   np->state = RUNNABLE;
2612 
2613   release(&ptable.lock);
2614 
2615   return pid;
2616 }
2617 
2618 
2619 
2620 
2621 void
2622 exit(void)
2623 {
2624   struct proc *p;
2625   int fd;
2626 
2627   if(proc == initproc)
2628     panic("init exiting");
2629 
2630   
2631   for(fd = 0; fd < NOFILE; fd++){
2632     if(proc->ofile[fd]){
2633       fileclose(proc->ofile[fd]);
2634       proc->ofile[fd] = 0;
2635     }
2636   }
2637 
2638   begin_op();
2639   iput(proc->cwd);
2640   end_op();
2641   proc->cwd = 0;
2642 
2643   acquire(&ptable.lock);
2644 
2645   
2646   wakeup1(proc->parent);
2647 
2648 
2649 
2650   
2651   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2652     if(p->parent == proc){
2653       p->parent = initproc;
2654       if(p->state == ZOMBIE)
2655         wakeup1(initproc);
2656     }
2657   }
2658 
2659   
2660   proc->state = ZOMBIE;
2661   proc->etime = ticks;
2662   sched();
2663   panic("zombie exit");
2664 }
2665 
2666 
2667 
2668 int
2669 wait(void)
2670 {
2671   struct proc *p;
2672   int havekids, pid;
2673 
2674   acquire(&ptable.lock);
2675   for(;;){
2676     
2677     havekids = 0;
2678     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2679       if(p->parent != proc)
2680         continue;
2681       havekids = 1;
2682       if(p->state == ZOMBIE){
2683         
2684         pid = p->pid;
2685         kfree(p->kstack);
2686         p->kstack = 0;
2687         freevm(p->pgdir);
2688         p->pid = 0;
2689         p->parent = 0;
2690         p->name[0] = 0;
2691         p->killed = 0;
2692         p->state = UNUSED;
2693         release(&ptable.lock);
2694         return pid;
2695       }
2696     }
2697 
2698 
2699 
2700     
2701     if(!havekids || proc->killed){
2702       release(&ptable.lock);
2703       return -1;
2704     }
2705 
2706     
2707     sleep(proc, &ptable.lock);  
2708   }
2709 }
2710 
2711 
2712 
2713 
2714 
2715 
2716 
2717 
2718 
2719 
2720 
2721 
2722 
2723 
2724 
2725 
2726 
2727 
2728 
2729 
2730 
2731 
2732 
2733 
2734 
2735 
2736 
2737 
2738 
2739 
2740 
2741 
2742 
2743 
2744 
2745 
2746 
2747 
2748 
2749 
2750 
2751 
2752 
2753 
2754 
2755 
2756 
2757 void
2758 scheduler(void)
2759 {
2760   struct proc *p;
2761 
2762   for(;;){
2763     
2764     sti();
2765 
2766     
2767     acquire(&ptable.lock);
2768     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2769       if(p->state != RUNNABLE)
2770         continue;
2771 
2772       
2773       
2774       
2775       proc = p;
2776       switchuvm(p);
2777       p->state = RUNNING;
2778       swtch(&cpu->scheduler, p->context);
2779       switchkvm();
2780 
2781       
2782       
2783       proc = 0;
2784     }
2785     release(&ptable.lock);
2786 
2787   }
2788 }
2789 
2790 
2791 
2792 
2793 
2794 
2795 
2796 
2797 
2798 
2799 
2800 
2801 
2802 
2803 
2804 
2805 
2806 
2807 void
2808 sched(void)
2809 {
2810   int intena;
2811 
2812   if(!holding(&ptable.lock))
2813     panic("sched ptable.lock");
2814   if(cpu->ncli != 1)
2815     panic("sched locks");
2816   if(proc->state == RUNNING)
2817     panic("sched running");
2818   if(readeflags()&FL_IF)
2819     panic("sched interruptible");
2820   intena = cpu->intena;
2821   swtch(&proc->context, cpu->scheduler);
2822   cpu->intena = intena;
2823 }
2824 
2825 
2826 void
2827 yield(void)
2828 {
2829   acquire(&ptable.lock);  
2830   proc->state = RUNNABLE;
2831   sched();
2832   release(&ptable.lock);
2833 }
2834 
2835 
2836 
2837 void
2838 forkret(void)
2839 {
2840   static int first = 1;
2841   
2842   release(&ptable.lock);
2843 
2844   if (first) {
2845     
2846     
2847     
2848     first = 0;
2849     iinit(ROOTDEV);
2850     initlog(ROOTDEV);
2851   }
2852 
2853   
2854 }
2855 
2856 
2857 
2858 void
2859 sleep(void *chan, struct spinlock *lk)
2860 {
2861   if(proc == 0)
2862     panic("sleep");
2863 
2864   if(lk == 0)
2865     panic("sleep without lk");
2866 
2867   
2868   
2869   
2870   
2871   
2872   
2873   if(lk != &ptable.lock){  
2874     acquire(&ptable.lock);  
2875     release(lk);
2876   }
2877 
2878   
2879   proc->chan = chan;
2880   proc->state = SLEEPING;
2881   sched();
2882 
2883   
2884   proc->chan = 0;
2885 
2886   
2887   if(lk != &ptable.lock){  
2888     release(&ptable.lock);
2889     acquire(lk);
2890   }
2891 }
2892 
2893 
2894 
2895 
2896 
2897 
2898 
2899 
2900 
2901 
2902 static void
2903 wakeup1(void *chan)
2904 {
2905   struct proc *p;
2906 
2907   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
2908     if(p->state == SLEEPING && p->chan == chan)
2909       p->state = RUNNABLE;
2910 }
2911 
2912 
2913 void
2914 wakeup(void *chan)
2915 {
2916   acquire(&ptable.lock);
2917   wakeup1(chan);
2918   release(&ptable.lock);
2919 }
2920 
2921 
2922 
2923 
2924 int
2925 kill(int pid)
2926 {
2927   struct proc *p;
2928 
2929   acquire(&ptable.lock);
2930   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2931     if(p->pid == pid){
2932       p->killed = 1;
2933       
2934       if(p->state == SLEEPING)
2935         p->state = RUNNABLE;
2936       release(&ptable.lock);
2937       return 0;
2938     }
2939   }
2940   release(&ptable.lock);
2941   return -1;
2942 }
2943 
2944 
2945 
2946 
2947 
2948 
2949 
2950 
2951 
2952 
2953 void
2954 procdump(void)
2955 {
2956   static char *states[] = {
2957   [UNUSED]    "unused",
2958   [EMBRYO]    "embryo",
2959   [SLEEPING]  "sleep ",
2960   [RUNNABLE]  "runble",
2961   [RUNNING]   "run   ",
2962   [ZOMBIE]    "zombie"
2963   };
2964   int i;
2965   struct proc *p;
2966   char *state;
2967   uint pc[10];
2968 
2969   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
2970     if(p->state == UNUSED)
2971       continue;
2972     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
2973       state = states[p->state];
2974     else
2975       state = "???";
2976     cprintf("%d %s %s", p->pid, state, p->name);
2977     if(p->state == SLEEPING){
2978       getcallerpcs((uint*)p->context->ebp+2, pc);
2979       for(i=0; i<10 && pc[i] != 0; i++)
2980         cprintf(" %p", pc[i]);
2981     }
2982     cprintf("\n");
2983   }
2984 }
2985 
2986 
2987 
2988 
2989 
2990 
2991 
2992 
2993 
2994 
2995 
2996 
2997 
2998 
2999 
3000 
3001 
3002 
3003 
3004 
3005 
3006 
3007 .globl swtch
3008 swtch:
3009   movl 4(%esp), %eax
3010   movl 8(%esp), %edx
3011 
3012   
3013   pushl %ebp
3014   pushl %ebx
3015   pushl %esi
3016   pushl %edi
3017 
3018   
3019   movl %esp, (%eax)
3020   movl %edx, %esp
3021 
3022   
3023   popl %edi
3024   popl %esi
3025   popl %ebx
3026   popl %ebp
3027   ret
3028 
3029 
3030 
3031 
3032 
3033 
3034 
3035 
3036 
3037 
3038 
3039 
3040 
3041 
3042 
3043 
3044 
3045 
3046 
3047 
3048 
3049 
3050 
3051 
3052 
3053 
3054 #include "types.h"
3055 #include "defs.h"
3056 #include "param.h"
3057 #include "memlayout.h"
3058 #include "mmu.h"
3059 #include "spinlock.h"
3060 
3061 void freerange(void *vstart, void *vend);
3062 extern char end[]; 
3063 
3064 struct run {
3065   struct run *next;
3066 };
3067 
3068 struct {
3069   struct spinlock lock;
3070   int use_lock;
3071   struct run *freelist;
3072 } kmem;
3073 
3074 
3075 
3076 
3077 
3078 
3079 void
3080 kinit1(void *vstart, void *vend)
3081 {
3082   initlock(&kmem.lock, "kmem");
3083   kmem.use_lock = 0;
3084   freerange(vstart, vend);
3085 }
3086 
3087 void
3088 kinit2(void *vstart, void *vend)
3089 {
3090   freerange(vstart, vend);
3091   kmem.use_lock = 1;
3092 }
3093 
3094 
3095 
3096 
3097 
3098 
3099 
3100 void
3101 freerange(void *vstart, void *vend)
3102 {
3103   char *p;
3104   p = (char*)PGROUNDUP((uint)vstart);
3105   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
3106     kfree(p);
3107 }
3108 
3109 
3110 
3111 
3112 
3113 
3114 void
3115 kfree(char *v)
3116 {
3117   struct run *r;
3118 
3119   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
3120     panic("kfree");
3121 
3122   
3123   memset(v, 1, PGSIZE);
3124 
3125   if(kmem.use_lock)
3126     acquire(&kmem.lock);
3127   r = (struct run*)v;
3128   r->next = kmem.freelist;
3129   kmem.freelist = r;
3130   if(kmem.use_lock)
3131     release(&kmem.lock);
3132 }
3133 
3134 
3135 
3136 
3137 char*
3138 kalloc(void)
3139 {
3140   struct run *r;
3141 
3142   if(kmem.use_lock)
3143     acquire(&kmem.lock);
3144   r = kmem.freelist;
3145   if(r)
3146     kmem.freelist = r->next;
3147   if(kmem.use_lock)
3148     release(&kmem.lock);
3149   return (char*)r;
3150 }
3151 
3152 
3153 
3154 
3155 
3156 
3157 
3158 
3159 
3160 
3161 
3162 
3163 
3164 
3165 
3166 
3167 
3168 
3169 
3170 
3171 
3172 
3173 
3174 
3175 
3176 
3177 
3178 
3179 
3180 
3181 
3182 
3183 
3184 
3185 
3186 
3187 
3188 
3189 
3190 
3191 
3192 
3193 
3194 
3195 
3196 
3197 
3198 
3199 
3200 
3201 
3202 
3203 #define T_DIVIDE         0      
3204 #define T_DEBUG          1      
3205 #define T_NMI            2      
3206 #define T_BRKPT          3      
3207 #define T_OFLOW          4      
3208 #define T_BOUND          5      
3209 #define T_ILLOP          6      
3210 #define T_DEVICE         7      
3211 #define T_DBLFLT         8      
3212 
3213 #define T_TSS           10      
3214 #define T_SEGNP         11      
3215 #define T_STACK         12      
3216 #define T_GPFLT         13      
3217 #define T_PGFLT         14      
3218 
3219 #define T_FPERR         16      
3220 #define T_ALIGN         17      
3221 #define T_MCHK          18      
3222 #define T_SIMDERR       19      
3223 
3224 
3225 
3226 #define T_SYSCALL       64      
3227 #define T_DEFAULT      500      
3228 
3229 #define T_IRQ0          32      
3230 
3231 #define IRQ_TIMER        0
3232 #define IRQ_KBD          1
3233 #define IRQ_COM1         4
3234 #define IRQ_IDE         14
3235 #define IRQ_ERROR       19
3236 #define IRQ_SPURIOUS    31
3237 
3238 
3239 
3240 
3241 
3242 
3243 
3244 
3245 
3246 
3247 
3248 
3249 
3250 #!/usr/bin/perl -w
3251 
3252 # Generate vectors.S, the trap/interrupt entry points.
3253 # There has to be one entry point per interrupt number
3254 # since otherwise there's no way for trap() to discover
3255 # the interrupt number.
3256 
3257 print "# generated by vectors.pl - do not edit\n";
3258 print "# handlers\n";
3259 print ".globl alltraps\n";
3260 for(my $i = 0; $i < 256; $i++){
3261     print ".globl vector$i\n";
3262     print "vector$i:\n";
3263     if(!($i == 8 || ($i >= 10 && $i <= 14) || $i == 17)){
3264         print "  pushl \$0\n";
3265     }
3266     print "  pushl \$$i\n";
3267     print "  jmp alltraps\n";
3268 }
3269 
3270 print "\n# vector table\n";
3271 print ".data\n";
3272 print ".globl vectors\n";
3273 print "vectors:\n";
3274 for(my $i = 0; $i < 256; $i++){
3275     print "  .long vector$i\n";
3276 }
3277 
3278 # sample output:
3279 #   # handlers
3280 #   .globl alltraps
3281 #   .globl vector0
3282 #   vector0:
3283 #     pushl $0
3284 #     pushl $0
3285 #     jmp alltraps
3286 #   ...
3287 #
3288 #   # vector table
3289 #   .data
3290 #   .globl vectors
3291 #   vectors:
3292 #     .long vector0
3293 #     .long vector1
3294 #     .long vector2
3295 #   ...
3296 
3297 
3298 
3299 
3300 
3301 
3302   
3303 .globl alltraps
3304 alltraps:
3305   
3306   pushl %ds
3307   pushl %es
3308   pushl %fs
3309   pushl %gs
3310   pushal
3311 
3312   
3313   movw $(SEG_KDATA<<3), %ax
3314   movw %ax, %ds
3315   movw %ax, %es
3316   movw $(SEG_KCPU<<3), %ax
3317   movw %ax, %fs
3318   movw %ax, %gs
3319 
3320   
3321   pushl %esp
3322   call trap
3323   addl $4, %esp
3324 
3325   
3326 .globl trapret
3327 trapret:
3328   popal
3329   popl %gs
3330   popl %fs
3331   popl %es
3332   popl %ds
3333   addl $0x8, %esp  
3334   iret
3335 
3336 
3337 
3338 
3339 
3340 
3341 
3342 
3343 
3344 
3345 
3346 
3347 
3348 
3349 
3350 #include "types.h"
3351 #include "defs.h"
3352 #include "param.h"
3353 #include "memlayout.h"
3354 #include "mmu.h"
3355 #include "proc.h"
3356 #include "x86.h"
3357 #include "traps.h"
3358 #include "spinlock.h"
3359 
3360 
3361 struct gatedesc idt[256];
3362 extern uint vectors[];  
3363 struct spinlock tickslock;
3364 uint ticks;
3365 
3366 void
3367 tvinit(void)
3368 {
3369   int i;
3370 
3371   for(i = 0; i < 256; i++)
3372     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
3373   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
3374 
3375   initlock(&tickslock, "time");
3376 }
3377 
3378 void
3379 idtinit(void)
3380 {
3381   lidt(idt, sizeof(idt));
3382 }
3383 
3384 
3385 
3386 
3387 
3388 
3389 
3390 
3391 
3392 
3393 
3394 
3395 
3396 
3397 
3398 
3399 
3400 void
3401 trap(struct trapframe *tf)
3402 {
3403   if(tf->trapno == T_SYSCALL){
3404     if(proc->killed)
3405       exit();
3406     proc->tf = tf;
3407     syscall();
3408     if(proc->killed)
3409       exit();
3410     return;
3411   }
3412 
3413   switch(tf->trapno){
3414   case T_IRQ0 + IRQ_TIMER:
3415     if(cpunum() == 0){
3416       acquire(&tickslock);
3417       ticks++;
3418       if(proc && proc->state == RUNNING)
3419         {
3420           proc->rtime++;
3421           
3422         }
3423       wakeup(&ticks);
3424       release(&tickslock);
3425     }
3426     lapiceoi();
3427     break;
3428   case T_IRQ0 + IRQ_IDE:
3429     ideintr();
3430     lapiceoi();
3431     break;
3432   case T_IRQ0 + IRQ_IDE+1:
3433     
3434     break;
3435   case T_IRQ0 + IRQ_KBD:
3436     kbdintr();
3437     lapiceoi();
3438     break;
3439   case T_IRQ0 + IRQ_COM1:
3440     uartintr();
3441     lapiceoi();
3442     break;
3443   case T_IRQ0 + 7:
3444   case T_IRQ0 + IRQ_SPURIOUS:
3445     cprintf("cpu%d: spurious interrupt at %x:%x\n",
3446             cpunum(), tf->cs, tf->eip);
3447     lapiceoi();
3448     break;
3449 
3450 
3451   default:
3452     if(proc == 0 || (tf->cs&3) == 0){
3453       
3454       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
3455               tf->trapno, cpunum(), tf->eip, rcr2());
3456       panic("trap");
3457     }
3458     
3459     cprintf("pid %d %s: trap %d err %d on cpu %d "
3460             "eip 0x%x addr 0x%x--kill proc\n",
3461             proc->pid, proc->name, tf->trapno, tf->err, cpunum(), tf->eip,
3462             rcr2());
3463     proc->killed = 1;
3464   }
3465 
3466   
3467   
3468   
3469   if(proc && proc->killed && (tf->cs&3) == DPL_USER)
3470     exit();
3471 
3472   
3473   
3474   if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER)
3475     yield();
3476 
3477   
3478   if(proc && proc->killed && (tf->cs&3) == DPL_USER)
3479     exit();
3480 }
3481 
3482 
3483 
3484 
3485 
3486 
3487 
3488 
3489 
3490 
3491 
3492 
3493 
3494 
3495 
3496 
3497 
3498 
3499 
3500 
3501 #define SYS_fork    1
3502 #define SYS_exit    2
3503 #define SYS_wait    3
3504 #define SYS_pipe    4
3505 #define SYS_read    5
3506 #define SYS_kill    6
3507 #define SYS_exec    7
3508 #define SYS_fstat   8
3509 #define SYS_chdir   9
3510 #define SYS_dup    10
3511 #define SYS_getpid 11
3512 #define SYS_sbrk   12
3513 #define SYS_sleep  13
3514 #define SYS_uptime 14
3515 #define SYS_open   15
3516 #define SYS_write  16
3517 #define SYS_mknod  17
3518 #define SYS_unlink 18
3519 #define SYS_link   19
3520 #define SYS_mkdir  20
3521 #define SYS_close  21
3522 #define SYS_getppid 22
3523 #define SYS_getPerformanceData 23
3524 
3525 
3526 
3527 
3528 
3529 
3530 
3531 
3532 
3533 
3534 
3535 
3536 
3537 
3538 
3539 
3540 
3541 
3542 
3543 
3544 
3545 
3546 
3547 
3548 
3549 
3550 #include "types.h"
3551 #include "defs.h"
3552 #include "param.h"
3553 #include "memlayout.h"
3554 #include "mmu.h"
3555 #include "proc.h"
3556 #include "x86.h"
3557 #include "syscall.h"
3558 
3559 
3560 
3561 
3562 
3563 
3564 
3565 
3566 int
3567 fetchint(uint addr, int *ip)
3568 {
3569   if(addr >= proc->sz || addr+4 > proc->sz)
3570     return -1;
3571   *ip = *(int*)(addr);
3572   return 0;
3573 }
3574 
3575 
3576 
3577 
3578 int
3579 fetchstr(uint addr, char **pp)
3580 {
3581   char *s, *ep;
3582 
3583   if(addr >= proc->sz)
3584     return -1;
3585   *pp = (char*)addr;
3586   ep = (char*)proc->sz;
3587   for(s = *pp; s < ep; s++)
3588     if(*s == 0)
3589       return s - *pp;
3590   return -1;
3591 }
3592 
3593 
3594 int
3595 argint(int n, int *ip)
3596 {
3597   return fetchint(proc->tf->esp + 4 + 4*n, ip);
3598 }
3599 
3600 
3601 
3602 
3603 int
3604 argptr(int n, char **pp, int size)
3605 {
3606   int i;
3607 
3608   if(argint(n, &i) < 0)
3609     return -1;
3610   if(size < 0 || (uint)i >= proc->sz || (uint)i+size > proc->sz)
3611     return -1;
3612   *pp = (char*)i;
3613   return 0;
3614 }
3615 
3616 
3617 
3618 
3619 
3620 int
3621 argstr(int n, char **pp)
3622 {
3623   int addr;
3624   if(argint(n, &addr) < 0)
3625     return -1;
3626   return fetchstr(addr, pp);
3627 }
3628 
3629 extern int sys_chdir(void);
3630 extern int sys_close(void);
3631 extern int sys_dup(void);
3632 extern int sys_exec(void);
3633 extern int sys_exit(void);
3634 extern int sys_fork(void);
3635 extern int sys_fstat(void);
3636 extern int sys_getpid(void);
3637 extern int sys_kill(void);
3638 extern int sys_link(void);
3639 extern int sys_mkdir(void);
3640 extern int sys_mknod(void);
3641 extern int sys_open(void);
3642 extern int sys_pipe(void);
3643 extern int sys_read(void);
3644 extern int sys_sbrk(void);
3645 extern int sys_sleep(void);
3646 extern int sys_unlink(void);
3647 extern int sys_wait(void);
3648 extern int sys_write(void);
3649 extern int sys_uptime(void);
3650 extern int sys_getppid(void);
3651 extern int sys_getPerformanceData(void);
3652 
3653 static int (*syscalls[])(void) = {
3654 [SYS_fork]    sys_fork,
3655 [SYS_exit]    sys_exit,
3656 [SYS_wait]    sys_wait,
3657 [SYS_pipe]    sys_pipe,
3658 [SYS_read]    sys_read,
3659 [SYS_kill]    sys_kill,
3660 [SYS_exec]    sys_exec,
3661 [SYS_fstat]   sys_fstat,
3662 [SYS_chdir]   sys_chdir,
3663 [SYS_dup]     sys_dup,
3664 [SYS_getpid]  sys_getpid,
3665 [SYS_sbrk]    sys_sbrk,
3666 [SYS_sleep]   sys_sleep,
3667 [SYS_uptime]  sys_uptime,
3668 [SYS_open]    sys_open,
3669 [SYS_write]   sys_write,
3670 [SYS_mknod]   sys_mknod,
3671 [SYS_unlink]  sys_unlink,
3672 [SYS_link]    sys_link,
3673 [SYS_mkdir]   sys_mkdir,
3674 [SYS_close]   sys_close,
3675 [SYS_getppid] sys_getppid,
3676 [SYS_getPerformanceData] sys_getPerformanceData,
3677 };
3678 
3679 void
3680 syscall(void)
3681 {
3682   int num;
3683 
3684   num = proc->tf->eax;
3685   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
3686     proc->tf->eax = syscalls[num]();
3687   } else {
3688     cprintf("%d %s: unknown sys call %d\n",
3689             proc->pid, proc->name, num);
3690     proc->tf->eax = -1;
3691   }
3692 }
3693 
3694 
3695 
3696 
3697 
3698 
3699 
3700 #include "types.h"
3701 #include "x86.h"
3702 #include "defs.h"
3703 #include "date.h"
3704 #include "param.h"
3705 #include "memlayout.h"
3706 #include "mmu.h"
3707 #include "proc.h"
3708 
3709 int
3710 sys_fork(void)
3711 {
3712   return fork();
3713 }
3714 
3715 int
3716 sys_exit(void)
3717 {
3718   exit();
3719   return 0;  
3720 }
3721 
3722 int
3723 sys_wait(void)
3724 {
3725   return wait();
3726 }
3727 
3728 int
3729 sys_kill(void)
3730 {
3731   int pid;
3732 
3733   if(argint(0, &pid) < 0)
3734     return -1;
3735   return kill(pid);
3736 }
3737 
3738 int
3739 sys_getpid(void)
3740 {
3741   return proc->pid;
3742 }
3743 
3744 
3745 
3746 
3747 
3748 
3749 
3750 int
3751 sys_sbrk(void)
3752 {
3753   int addr;
3754   int n;
3755 
3756   if(argint(0, &n) < 0)
3757     return -1;
3758   addr = proc->sz;
3759   if(growproc(n) < 0)
3760     return -1;
3761   return addr;
3762 }
3763 
3764 int
3765 sys_sleep(void)
3766 {
3767   int n;
3768   uint ticks0;
3769 
3770   if(argint(0, &n) < 0)
3771     return -1;
3772   acquire(&tickslock);
3773   ticks0 = ticks;
3774   while(ticks - ticks0 < n){
3775     if(proc->killed){
3776       release(&tickslock);
3777       return -1;
3778     }
3779     sleep(&ticks, &tickslock);
3780   }
3781   release(&tickslock);
3782   return 0;
3783 }
3784 
3785 
3786 
3787 int
3788 sys_uptime(void)
3789 {
3790   uint xticks;
3791 
3792   acquire(&tickslock);
3793   xticks = ticks;
3794   release(&tickslock);
3795   return xticks;
3796 }
3797 
3798 
3799 
3800 int
3801 sys_getppid(void)
3802 {
3803   
3804   
3805   
3806    return proc->parent->pid+6;
3807 }
3808 
3809 int
3810 sys_getPerformanceData(void)
3811 {
3812 
3813   char *wtime ;
3814   char *rtime;
3815 
3816 
3817   argstr(0, &wtime);
3818   argstr(1, &rtime);
3819 
3820   *wtime = ticks-(proc->ctime)-(proc->rtime);
3821   *rtime = proc->rtime;
3822   return 1;
3823 }
3824 
3825 
3826 
3827 
3828 
3829 
3830 
3831 
3832 
3833 
3834 
3835 
3836 
3837 
3838 
3839 
3840 
3841 
3842 
3843 
3844 
3845 
3846 
3847 
3848 
3849 
3850 struct buf {
3851   int flags;
3852   uint dev;
3853   uint blockno;
3854   struct sleeplock lock;
3855   uint refcnt;
3856   struct buf *prev; 
3857   struct buf *next;
3858   struct buf *qnext; 
3859   uchar data[BSIZE];
3860 };
3861 #define B_VALID 0x2  
3862 #define B_DIRTY 0x4  
3863 
3864 
3865 
3866 
3867 
3868 
3869 
3870 
3871 
3872 
3873 
3874 
3875 
3876 
3877 
3878 
3879 
3880 
3881 
3882 
3883 
3884 
3885 
3886 
3887 
3888 
3889 
3890 
3891 
3892 
3893 
3894 
3895 
3896 
3897 
3898 
3899 
3900 
3901 struct sleeplock {
3902   uint locked;       
3903   struct spinlock lk; 
3904 
3905   
3906   char *name;        
3907   int pid;           
3908 };
3909 
3910 
3911 
3912 
3913 
3914 
3915 
3916 
3917 
3918 
3919 
3920 
3921 
3922 
3923 
3924 
3925 
3926 
3927 
3928 
3929 
3930 
3931 
3932 
3933 
3934 
3935 
3936 
3937 
3938 
3939 
3940 
3941 
3942 
3943 
3944 
3945 
3946 
3947 
3948 
3949 
3950 #define O_RDONLY  0x000
3951 #define O_WRONLY  0x001
3952 #define O_RDWR    0x002
3953 #define O_CREATE  0x200
3954 
3955 
3956 
3957 
3958 
3959 
3960 
3961 
3962 
3963 
3964 
3965 
3966 
3967 
3968 
3969 
3970 
3971 
3972 
3973 
3974 
3975 
3976 
3977 
3978 
3979 
3980 
3981 
3982 
3983 
3984 
3985 
3986 
3987 
3988 
3989 
3990 
3991 
3992 
3993 
3994 
3995 
3996 
3997 
3998 
3999 
4000 #define T_DIR  1   
4001 #define T_FILE 2   
4002 #define T_DEV  3   
4003 
4004 struct stat {
4005   short type;  
4006   int dev;     
4007   uint ino;    
4008   short nlink; 
4009   uint size;   
4010 };
4011 
4012 
4013 
4014 
4015 
4016 
4017 
4018 
4019 
4020 
4021 
4022 
4023 
4024 
4025 
4026 
4027 
4028 
4029 
4030 
4031 
4032 
4033 
4034 
4035 
4036 
4037 
4038 
4039 
4040 
4041 
4042 
4043 
4044 
4045 
4046 
4047 
4048 
4049 
4050 
4051 
4052 
4053 
4054 #define ROOTINO 1  
4055 #define BSIZE 512  
4056 
4057 
4058 
4059 
4060 
4061 
4062 
4063 struct superblock {
4064   uint size;         
4065   uint nblocks;      
4066   uint ninodes;      
4067   uint nlog;         
4068   uint logstart;     
4069   uint inodestart;   
4070   uint bmapstart;    
4071 };
4072 
4073 #define NDIRECT 12
4074 #define NINDIRECT (BSIZE / sizeof(uint))
4075 #define MAXFILE (NDIRECT + NINDIRECT)
4076 
4077 
4078 struct dinode {
4079   short type;           
4080   short major;          
4081   short minor;          
4082   short nlink;          
4083   uint size;            
4084   uint addrs[NDIRECT+1];   
4085 };
4086 
4087 
4088 
4089 
4090 
4091 
4092 
4093 
4094 
4095 
4096 
4097 
4098 
4099 
4100 
4101 #define IPB           (BSIZE / sizeof(struct dinode))
4102 
4103 
4104 #define IBLOCK(i, sb)     ((i) / IPB + sb.inodestart)
4105 
4106 
4107 #define BPB           (BSIZE*8)
4108 
4109 
4110 #define BBLOCK(b, sb) (b/BPB + sb.bmapstart)
4111 
4112 
4113 #define DIRSIZ 14
4114 
4115 struct dirent {
4116   ushort inum;
4117   char name[DIRSIZ];
4118 };
4119 
4120 
4121 
4122 
4123 
4124 
4125 
4126 
4127 
4128 
4129 
4130 
4131 
4132 
4133 
4134 
4135 
4136 
4137 
4138 
4139 
4140 
4141 
4142 
4143 
4144 
4145 
4146 
4147 
4148 
4149 
4150 struct file {
4151   enum { FD_NONE, FD_PIPE, FD_INODE } type;
4152   int ref; 
4153   char readable;
4154   char writable;
4155   struct pipe *pipe;
4156   struct inode *ip;
4157   uint off;
4158 };
4159 
4160 
4161 
4162 struct inode {
4163   uint dev;           
4164   uint inum;          
4165   int ref;            
4166   struct sleeplock lock;
4167   int flags;          
4168 
4169   short type;         
4170   short major;
4171   short minor;
4172   short nlink;
4173   uint size;
4174   uint addrs[NDIRECT+1];
4175 };
4176 #define I_VALID 0x2
4177 
4178 
4179 
4180 struct devsw {
4181   int (*read)(struct inode*, char*, int);
4182   int (*write)(struct inode*, char*, int);
4183 };
4184 
4185 extern struct devsw devsw[];
4186 
4187 #define CONSOLE 1
4188 
4189 
4190 
4191 
4192 
4193 
4194 
4195 
4196 
4197 
4198 
4199 
4200 
4201 
4202 
4203 
4204 
4205 
4206 
4207 
4208 
4209 
4210 
4211 
4212 
4213 
4214 
4215 
4216 
4217 
4218 
4219 
4220 
4221 
4222 
4223 
4224 
4225 
4226 
4227 
4228 
4229 
4230 
4231 
4232 
4233 
4234 
4235 
4236 
4237 
4238 
4239 
4240 
4241 
4242 
4243 
4244 
4245 
4246 
4247 
4248 
4249 
4250 
4251 
4252 #include "types.h"
4253 #include "defs.h"
4254 #include "param.h"
4255 #include "memlayout.h"
4256 #include "mmu.h"
4257 #include "proc.h"
4258 #include "x86.h"
4259 #include "traps.h"
4260 #include "spinlock.h"
4261 #include "sleeplock.h"
4262 #include "fs.h"
4263 #include "buf.h"
4264 
4265 #define SECTOR_SIZE   512
4266 #define IDE_BSY       0x80
4267 #define IDE_DRDY      0x40
4268 #define IDE_DF        0x20
4269 #define IDE_ERR       0x01
4270 
4271 #define IDE_CMD_READ  0x20
4272 #define IDE_CMD_WRITE 0x30
4273 #define IDE_CMD_RDMUL 0xc4
4274 #define IDE_CMD_WRMUL 0xc5
4275 
4276 
4277 
4278 
4279 
4280 static struct spinlock idelock;
4281 static struct buf *idequeue;
4282 
4283 static int havedisk1;
4284 static void idestart(struct buf*);
4285 
4286 
4287 static int
4288 idewait(int checkerr)
4289 {
4290   int r;
4291 
4292   while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
4293     ;
4294   if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
4295     return -1;
4296   return 0;
4297 }
4298 
4299 
4300 void
4301 ideinit(void)
4302 {
4303   int i;
4304 
4305   initlock(&idelock, "ide");
4306   picenable(IRQ_IDE);
4307   ioapicenable(IRQ_IDE, ncpu - 1);
4308   idewait(0);
4309 
4310   
4311   outb(0x1f6, 0xe0 | (1<<4));
4312   for(i=0; i<1000; i++){
4313     if(inb(0x1f7) != 0){
4314       havedisk1 = 1;
4315       break;
4316     }
4317   }
4318 
4319   
4320   outb(0x1f6, 0xe0 | (0<<4));
4321 }
4322 
4323 
4324 static void
4325 idestart(struct buf *b)
4326 {
4327   if(b == 0)
4328     panic("idestart");
4329   if(b->blockno >= FSSIZE)
4330     panic("incorrect blockno");
4331   int sector_per_block =  BSIZE/SECTOR_SIZE;
4332   int sector = b->blockno * sector_per_block;
4333   int read_cmd = (sector_per_block == 1) ? IDE_CMD_READ :  IDE_CMD_RDMUL;
4334   int write_cmd = (sector_per_block == 1) ? IDE_CMD_WRITE : IDE_CMD_WRMUL;
4335 
4336   if (sector_per_block > 7) panic("idestart");
4337 
4338   idewait(0);
4339   outb(0x3f6, 0);  
4340   outb(0x1f2, sector_per_block);  
4341   outb(0x1f3, sector & 0xff);
4342   outb(0x1f4, (sector >> 8) & 0xff);
4343   outb(0x1f5, (sector >> 16) & 0xff);
4344   outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
4345   if(b->flags & B_DIRTY){
4346     outb(0x1f7, write_cmd);
4347     outsl(0x1f0, b->data, BSIZE/4);
4348   } else {
4349     outb(0x1f7, read_cmd);
4350   }
4351 }
4352 
4353 
4354 void
4355 ideintr(void)
4356 {
4357   struct buf *b;
4358 
4359   
4360   acquire(&idelock);
4361   if((b = idequeue) == 0){
4362     release(&idelock);
4363     
4364     return;
4365   }
4366   idequeue = b->qnext;
4367 
4368   
4369   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
4370     insl(0x1f0, b->data, BSIZE/4);
4371 
4372   
4373   b->flags |= B_VALID;
4374   b->flags &= ~B_DIRTY;
4375   wakeup(b);
4376 
4377   
4378   if(idequeue != 0)
4379     idestart(idequeue);
4380 
4381   release(&idelock);
4382 }
4383 
4384 
4385 
4386 
4387 
4388 
4389 
4390 
4391 
4392 
4393 
4394 
4395 
4396 
4397 
4398 
4399 
4400 
4401 
4402 
4403 void
4404 iderw(struct buf *b)
4405 {
4406   struct buf **pp;
4407 
4408   if(!holdingsleep(&b->lock))
4409     panic("iderw: buf not locked");
4410   if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
4411     panic("iderw: nothing to do");
4412   if(b->dev != 0 && !havedisk1)
4413     panic("iderw: ide disk 1 not present");
4414 
4415   acquire(&idelock);  
4416 
4417   
4418   b->qnext = 0;
4419   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  
4420     ;
4421   *pp = b;
4422 
4423   
4424   if(idequeue == b)
4425     idestart(b);
4426 
4427   
4428   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
4429     sleep(b, &idelock);
4430   }
4431 
4432   release(&idelock);
4433 }
4434 
4435 
4436 
4437 
4438 
4439 
4440 
4441 
4442 
4443 
4444 
4445 
4446 
4447 
4448 
4449 
4450 
4451 
4452 
4453 
4454 
4455 
4456 
4457 
4458 
4459 
4460 
4461 
4462 
4463 
4464 
4465 
4466 
4467 
4468 
4469 
4470 #include "types.h"
4471 #include "defs.h"
4472 #include "param.h"
4473 #include "spinlock.h"
4474 #include "sleeplock.h"
4475 #include "fs.h"
4476 #include "buf.h"
4477 
4478 struct {
4479   struct spinlock lock;
4480   struct buf buf[NBUF];
4481 
4482   
4483   
4484   struct buf head;
4485 } bcache;
4486 
4487 void
4488 binit(void)
4489 {
4490   struct buf *b;
4491 
4492   initlock(&bcache.lock, "bcache");
4493 
4494 
4495 
4496 
4497 
4498 
4499 
4500   
4501   bcache.head.prev = &bcache.head;
4502   bcache.head.next = &bcache.head;
4503   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
4504     b->next = bcache.head.next;
4505     b->prev = &bcache.head;
4506     initsleeplock(&b->lock, "buffer");
4507     bcache.head.next->prev = b;
4508     bcache.head.next = b;
4509   }
4510 }
4511 
4512 
4513 
4514 
4515 static struct buf*
4516 bget(uint dev, uint blockno)
4517 {
4518   struct buf *b;
4519 
4520   acquire(&bcache.lock);
4521 
4522   
4523   for(b = bcache.head.next; b != &bcache.head; b = b->next){
4524     if(b->dev == dev && b->blockno == blockno){
4525       b->refcnt++;
4526       release(&bcache.lock);
4527       acquiresleep(&b->lock);
4528       return b;
4529     }
4530   }
4531 
4532   
4533   
4534   
4535   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
4536     if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
4537       b->dev = dev;
4538       b->blockno = blockno;
4539       b->flags = 0;
4540       b->refcnt = 1;
4541       release(&bcache.lock);
4542       acquiresleep(&b->lock);
4543       return b;
4544     }
4545   }
4546   panic("bget: no buffers");
4547 }
4548 
4549 
4550 
4551 struct buf*
4552 bread(uint dev, uint blockno)
4553 {
4554   struct buf *b;
4555 
4556   b = bget(dev, blockno);
4557   if(!(b->flags & B_VALID)) {
4558     iderw(b);
4559   }
4560   return b;
4561 }
4562 
4563 
4564 void
4565 bwrite(struct buf *b)
4566 {
4567   if(!holdingsleep(&b->lock))
4568     panic("bwrite");
4569   b->flags |= B_DIRTY;
4570   iderw(b);
4571 }
4572 
4573 
4574 
4575 void
4576 brelse(struct buf *b)
4577 {
4578   if(!holdingsleep(&b->lock))
4579     panic("brelse");
4580 
4581   releasesleep(&b->lock);
4582 
4583   acquire(&bcache.lock);
4584   b->refcnt--;
4585   if (b->refcnt == 0) {
4586     
4587     b->next->prev = b->prev;
4588     b->prev->next = b->next;
4589     b->next = bcache.head.next;
4590     b->prev = &bcache.head;
4591     bcache.head.next->prev = b;
4592     bcache.head.next = b;
4593   }
4594 
4595   release(&bcache.lock);
4596 }
4597 
4598 
4599 
4600 
4601 
4602 
4603 
4604 
4605 
4606 
4607 
4608 
4609 
4610 
4611 
4612 
4613 
4614 
4615 
4616 
4617 
4618 
4619 
4620 
4621 
4622 
4623 
4624 
4625 
4626 
4627 
4628 
4629 
4630 
4631 
4632 
4633 
4634 
4635 
4636 
4637 
4638 
4639 
4640 
4641 
4642 
4643 
4644 
4645 
4646 
4647 
4648 
4649 
4650 
4651 
4652 #include "types.h"
4653 #include "defs.h"
4654 #include "param.h"
4655 #include "x86.h"
4656 #include "memlayout.h"
4657 #include "mmu.h"
4658 #include "proc.h"
4659 #include "spinlock.h"
4660 #include "sleeplock.h"
4661 
4662 void
4663 initsleeplock(struct sleeplock *lk, char *name)
4664 {
4665   initlock(&lk->lk, "sleep lock");
4666   lk->name = name;
4667   lk->locked = 0;
4668   lk->pid = 0;
4669 }
4670 
4671 void
4672 acquiresleep(struct sleeplock *lk)
4673 {
4674   acquire(&lk->lk);
4675   while (lk->locked) {
4676     sleep(lk, &lk->lk);
4677   }
4678   lk->locked = 1;
4679   lk->pid = proc->pid;
4680   release(&lk->lk);
4681 }
4682 
4683 void
4684 releasesleep(struct sleeplock *lk)
4685 {
4686   acquire(&lk->lk);
4687   lk->locked = 0;
4688   lk->pid = 0;
4689   wakeup(lk);
4690   release(&lk->lk);
4691 }
4692 
4693 
4694 
4695 
4696 
4697 
4698 
4699 
4700 int
4701 holdingsleep(struct sleeplock *lk)
4702 {
4703   int r;
4704 
4705   acquire(&lk->lk);
4706   r = lk->locked;
4707   release(&lk->lk);
4708   return r;
4709 }
4710 
4711 
4712 
4713 
4714 
4715 
4716 
4717 
4718 
4719 
4720 
4721 
4722 
4723 
4724 
4725 
4726 
4727 
4728 
4729 
4730 
4731 
4732 
4733 
4734 
4735 
4736 
4737 
4738 
4739 
4740 
4741 
4742 
4743 
4744 
4745 
4746 
4747 
4748 
4749 
4750 #include "types.h"
4751 #include "defs.h"
4752 #include "param.h"
4753 #include "spinlock.h"
4754 #include "sleeplock.h"
4755 #include "fs.h"
4756 #include "buf.h"
4757 
4758 
4759 
4760 
4761 
4762 
4763 
4764 
4765 
4766 
4767 
4768 
4769 
4770 
4771 
4772 
4773 
4774 
4775 
4776 
4777 
4778 
4779 
4780 
4781 
4782 
4783 struct logheader {
4784   int n;
4785   int block[LOGSIZE];
4786 };
4787 
4788 struct log {
4789   struct spinlock lock;
4790   int start;
4791   int size;
4792   int outstanding; 
4793   int committing;  
4794   int dev;
4795   struct logheader lh;
4796 };
4797 
4798 
4799 
4800 struct log log;
4801 
4802 static void recover_from_log(void);
4803 static void commit();
4804 
4805 void
4806 initlog(int dev)
4807 {
4808   if (sizeof(struct logheader) >= BSIZE)
4809     panic("initlog: too big logheader");
4810 
4811   struct superblock sb;
4812   initlock(&log.lock, "log");
4813   readsb(dev, &sb);
4814   log.start = sb.logstart;
4815   log.size = sb.nlog;
4816   log.dev = dev;
4817   recover_from_log();
4818 }
4819 
4820 
4821 static void
4822 install_trans(void)
4823 {
4824   int tail;
4825 
4826   for (tail = 0; tail < log.lh.n; tail++) {
4827     struct buf *lbuf = bread(log.dev, log.start+tail+1); 
4828     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); 
4829     memmove(dbuf->data, lbuf->data, BSIZE);  
4830     bwrite(dbuf);  
4831     brelse(lbuf);
4832     brelse(dbuf);
4833   }
4834 }
4835 
4836 
4837 static void
4838 read_head(void)
4839 {
4840   struct buf *buf = bread(log.dev, log.start);
4841   struct logheader *lh = (struct logheader *) (buf->data);
4842   int i;
4843   log.lh.n = lh->n;
4844   for (i = 0; i < log.lh.n; i++) {
4845     log.lh.block[i] = lh->block[i];
4846   }
4847   brelse(buf);
4848 }
4849 
4850 
4851 
4852 
4853 static void
4854 write_head(void)
4855 {
4856   struct buf *buf = bread(log.dev, log.start);
4857   struct logheader *hb = (struct logheader *) (buf->data);
4858   int i;
4859   hb->n = log.lh.n;
4860   for (i = 0; i < log.lh.n; i++) {
4861     hb->block[i] = log.lh.block[i];
4862   }
4863   bwrite(buf);
4864   brelse(buf);
4865 }
4866 
4867 static void
4868 recover_from_log(void)
4869 {
4870   read_head();
4871   install_trans(); 
4872   log.lh.n = 0;
4873   write_head(); 
4874 }
4875 
4876 
4877 void
4878 begin_op(void)
4879 {
4880   acquire(&log.lock);
4881   while(1){
4882     if(log.committing){
4883       sleep(&log, &log.lock);
4884     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
4885       
4886       sleep(&log, &log.lock);
4887     } else {
4888       log.outstanding += 1;
4889       release(&log.lock);
4890       break;
4891     }
4892   }
4893 }
4894 
4895 
4896 
4897 
4898 
4899 
4900 
4901 
4902 void
4903 end_op(void)
4904 {
4905   int do_commit = 0;
4906 
4907   acquire(&log.lock);
4908   log.outstanding -= 1;
4909   if(log.committing)
4910     panic("log.committing");
4911   if(log.outstanding == 0){
4912     do_commit = 1;
4913     log.committing = 1;
4914   } else {
4915     
4916     wakeup(&log);
4917   }
4918   release(&log.lock);
4919 
4920   if(do_commit){
4921     
4922     
4923     commit();
4924     acquire(&log.lock);
4925     log.committing = 0;
4926     wakeup(&log);
4927     release(&log.lock);
4928   }
4929 }
4930 
4931 
4932 static void
4933 write_log(void)
4934 {
4935   int tail;
4936 
4937   for (tail = 0; tail < log.lh.n; tail++) {
4938     struct buf *to = bread(log.dev, log.start+tail+1); 
4939     struct buf *from = bread(log.dev, log.lh.block[tail]); 
4940     memmove(to->data, from->data, BSIZE);
4941     bwrite(to);  
4942     brelse(from);
4943     brelse(to);
4944   }
4945 }
4946 
4947 
4948 
4949 
4950 static void
4951 commit()
4952 {
4953   if (log.lh.n > 0) {
4954     write_log();     
4955     write_head();    
4956     install_trans(); 
4957     log.lh.n = 0;
4958     write_head();    
4959   }
4960 }
4961 
4962 
4963 
4964 
4965 
4966 
4967 
4968 
4969 
4970 
4971 void
4972 log_write(struct buf *b)
4973 {
4974   int i;
4975 
4976   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
4977     panic("too big a transaction");
4978   if (log.outstanding < 1)
4979     panic("log_write outside of trans");
4980 
4981   acquire(&log.lock);
4982   for (i = 0; i < log.lh.n; i++) {
4983     if (log.lh.block[i] == b->blockno)   
4984       break;
4985   }
4986   log.lh.block[i] = b->blockno;
4987   if (i == log.lh.n)
4988     log.lh.n++;
4989   b->flags |= B_DIRTY; 
4990   release(&log.lock);
4991 }
4992 
4993 
4994 
4995 
4996 
4997 
4998 
4999 
5000 
5001 
5002 
5003 
5004 
5005 
5006 
5007 
5008 
5009 
5010 
5011 #include "types.h"
5012 #include "defs.h"
5013 #include "param.h"
5014 #include "stat.h"
5015 #include "mmu.h"
5016 #include "proc.h"
5017 #include "spinlock.h"
5018 #include "sleeplock.h"
5019 #include "fs.h"
5020 #include "buf.h"
5021 #include "file.h"
5022 
5023 #define min(a, b) ((a) < (b) ? (a) : (b))
5024 static void itrunc(struct inode*);
5025 
5026 
5027 struct superblock sb;
5028 
5029 
5030 void
5031 readsb(int dev, struct superblock *sb)
5032 {
5033   struct buf *bp;
5034 
5035   bp = bread(dev, 1);
5036   memmove(sb, bp->data, sizeof(*sb));
5037   brelse(bp);
5038 }
5039 
5040 
5041 
5042 
5043 
5044 
5045 
5046 
5047 
5048 
5049 
5050 
5051 static void
5052 bzero(int dev, int bno)
5053 {
5054   struct buf *bp;
5055 
5056   bp = bread(dev, bno);
5057   memset(bp->data, 0, BSIZE);
5058   log_write(bp);
5059   brelse(bp);
5060 }
5061 
5062 
5063 
5064 
5065 static uint
5066 balloc(uint dev)
5067 {
5068   int b, bi, m;
5069   struct buf *bp;
5070 
5071   bp = 0;
5072   for(b = 0; b < sb.size; b += BPB){
5073     bp = bread(dev, BBLOCK(b, sb));
5074     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
5075       m = 1 << (bi % 8);
5076       if((bp->data[bi/8] & m) == 0){  
5077         bp->data[bi/8] |= m;  
5078         log_write(bp);
5079         brelse(bp);
5080         bzero(dev, b + bi);
5081         return b + bi;
5082       }
5083     }
5084     brelse(bp);
5085   }
5086   panic("balloc: out of blocks");
5087 }
5088 
5089 
5090 
5091 
5092 
5093 
5094 
5095 
5096 
5097 
5098 
5099 
5100 
5101 static void
5102 bfree(int dev, uint b)
5103 {
5104   struct buf *bp;
5105   int bi, m;
5106 
5107   readsb(dev, &sb);
5108   bp = bread(dev, BBLOCK(b, sb));
5109   bi = b % BPB;
5110   m = 1 << (bi % 8);
5111   if((bp->data[bi/8] & m) == 0)
5112     panic("freeing free block");
5113   bp->data[bi/8] &= ~m;
5114   log_write(bp);
5115   brelse(bp);
5116 }
5117 
5118 
5119 
5120 
5121 
5122 
5123 
5124 
5125 
5126 
5127 
5128 
5129 
5130 
5131 
5132 
5133 
5134 
5135 
5136 
5137 
5138 
5139 
5140 
5141 
5142 
5143 
5144 
5145 
5146 
5147 
5148 
5149 
5150 
5151 
5152 
5153 
5154 
5155 
5156 
5157 
5158 
5159 
5160 
5161 
5162 
5163 
5164 
5165 
5166 
5167 
5168 
5169 
5170 
5171 
5172 
5173 
5174 
5175 
5176 
5177 
5178 struct {
5179   struct spinlock lock;
5180   struct inode inode[NINODE];
5181 } icache;
5182 
5183 void
5184 iinit(int dev)
5185 {
5186   int i = 0;
5187 
5188   initlock(&icache.lock, "icache");
5189   for(i = 0; i < NINODE; i++) {
5190     initsleeplock(&icache.inode[i].lock, "inode");
5191   }
5192 
5193   readsb(dev, &sb);
5194   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
5195  inodestart %d bmap start %d\n", sb.size, sb.nblocks,
5196           sb.ninodes, sb.nlog, sb.logstart, sb.inodestart,
5197           sb.bmapstart);
5198 }
5199 
5200 static struct inode* iget(uint dev, uint inum);
5201 
5202 
5203 
5204 
5205 
5206 
5207 
5208 
5209 
5210 
5211 
5212 
5213 
5214 
5215 
5216 
5217 
5218 
5219 
5220 
5221 
5222 
5223 
5224 
5225 
5226 
5227 
5228 
5229 
5230 
5231 
5232 
5233 
5234 
5235 
5236 
5237 
5238 
5239 
5240 
5241 
5242 
5243 
5244 
5245 
5246 
5247 
5248 
5249 
5250 
5251 
5252 struct inode*
5253 ialloc(uint dev, short type)
5254 {
5255   int inum;
5256   struct buf *bp;
5257   struct dinode *dip;
5258 
5259   for(inum = 1; inum < sb.ninodes; inum++){
5260     bp = bread(dev, IBLOCK(inum, sb));
5261     dip = (struct dinode*)bp->data + inum%IPB;
5262     if(dip->type == 0){  
5263       memset(dip, 0, sizeof(*dip));
5264       dip->type = type;
5265       log_write(bp);   
5266       brelse(bp);
5267       return iget(dev, inum);
5268     }
5269     brelse(bp);
5270   }
5271   panic("ialloc: no inodes");
5272 }
5273 
5274 
5275 void
5276 iupdate(struct inode *ip)
5277 {
5278   struct buf *bp;
5279   struct dinode *dip;
5280 
5281   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
5282   dip = (struct dinode*)bp->data + ip->inum%IPB;
5283   dip->type = ip->type;
5284   dip->major = ip->major;
5285   dip->minor = ip->minor;
5286   dip->nlink = ip->nlink;
5287   dip->size = ip->size;
5288   memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
5289   log_write(bp);
5290   brelse(bp);
5291 }
5292 
5293 
5294 
5295 
5296 
5297 
5298 
5299 
5300 
5301 
5302 
5303 static struct inode*
5304 iget(uint dev, uint inum)
5305 {
5306   struct inode *ip, *empty;
5307 
5308   acquire(&icache.lock);
5309 
5310   
5311   empty = 0;
5312   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
5313     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
5314       ip->ref++;
5315       release(&icache.lock);
5316       return ip;
5317     }
5318     if(empty == 0 && ip->ref == 0)    
5319       empty = ip;
5320   }
5321 
5322   
5323   if(empty == 0)
5324     panic("iget: no inodes");
5325 
5326   ip = empty;
5327   ip->dev = dev;
5328   ip->inum = inum;
5329   ip->ref = 1;
5330   ip->flags = 0;
5331   release(&icache.lock);
5332 
5333   return ip;
5334 }
5335 
5336 
5337 
5338 struct inode*
5339 idup(struct inode *ip)
5340 {
5341   acquire(&icache.lock);
5342   ip->ref++;
5343   release(&icache.lock);
5344   return ip;
5345 }
5346 
5347 
5348 
5349 
5350 
5351 
5352 void
5353 ilock(struct inode *ip)
5354 {
5355   struct buf *bp;
5356   struct dinode *dip;
5357 
5358   if(ip == 0 || ip->ref < 1)
5359     panic("ilock");
5360 
5361   acquiresleep(&ip->lock);
5362 
5363   if(!(ip->flags & I_VALID)){
5364     bp = bread(ip->dev, IBLOCK(ip->inum, sb));
5365     dip = (struct dinode*)bp->data + ip->inum%IPB;
5366     ip->type = dip->type;
5367     ip->major = dip->major;
5368     ip->minor = dip->minor;
5369     ip->nlink = dip->nlink;
5370     ip->size = dip->size;
5371     memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
5372     brelse(bp);
5373     ip->flags |= I_VALID;
5374     if(ip->type == 0)
5375       panic("ilock: no type");
5376   }
5377 }
5378 
5379 
5380 void
5381 iunlock(struct inode *ip)
5382 {
5383   if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
5384     panic("iunlock");
5385 
5386   releasesleep(&ip->lock);
5387 }
5388 
5389 
5390 
5391 
5392 
5393 
5394 
5395 
5396 
5397 
5398 
5399 
5400 
5401 
5402 
5403 
5404 
5405 
5406 
5407 void
5408 iput(struct inode *ip)
5409 {
5410   acquire(&icache.lock);
5411   if(ip->ref == 1 && (ip->flags & I_VALID) && ip->nlink == 0){
5412     
5413     release(&icache.lock);
5414     itrunc(ip);
5415     ip->type = 0;
5416     iupdate(ip);
5417     acquire(&icache.lock);
5418     ip->flags = 0;
5419   }
5420   ip->ref--;
5421   release(&icache.lock);
5422 }
5423 
5424 
5425 void
5426 iunlockput(struct inode *ip)
5427 {
5428   iunlock(ip);
5429   iput(ip);
5430 }
5431 
5432 
5433 
5434 
5435 
5436 
5437 
5438 
5439 
5440 
5441 
5442 
5443 
5444 
5445 
5446 
5447 
5448 
5449 
5450 
5451 
5452 
5453 
5454 
5455 
5456 
5457 
5458 
5459 static uint
5460 bmap(struct inode *ip, uint bn)
5461 {
5462   uint addr, *a;
5463   struct buf *bp;
5464 
5465   if(bn < NDIRECT){
5466     if((addr = ip->addrs[bn]) == 0)
5467       ip->addrs[bn] = addr = balloc(ip->dev);
5468     return addr;
5469   }
5470   bn -= NDIRECT;
5471 
5472   if(bn < NINDIRECT){
5473     
5474     if((addr = ip->addrs[NDIRECT]) == 0)
5475       ip->addrs[NDIRECT] = addr = balloc(ip->dev);
5476     bp = bread(ip->dev, addr);
5477     a = (uint*)bp->data;
5478     if((addr = a[bn]) == 0){
5479       a[bn] = addr = balloc(ip->dev);
5480       log_write(bp);
5481     }
5482     brelse(bp);
5483     return addr;
5484   }
5485 
5486   panic("bmap: out of range");
5487 }
5488 
5489 
5490 
5491 
5492 
5493 
5494 
5495 
5496 
5497 
5498 
5499 
5500 
5501 
5502 
5503 
5504 
5505 static void
5506 itrunc(struct inode *ip)
5507 {
5508   int i, j;
5509   struct buf *bp;
5510   uint *a;
5511 
5512   for(i = 0; i < NDIRECT; i++){
5513     if(ip->addrs[i]){
5514       bfree(ip->dev, ip->addrs[i]);
5515       ip->addrs[i] = 0;
5516     }
5517   }
5518 
5519   if(ip->addrs[NDIRECT]){
5520     bp = bread(ip->dev, ip->addrs[NDIRECT]);
5521     a = (uint*)bp->data;
5522     for(j = 0; j < NINDIRECT; j++){
5523       if(a[j])
5524         bfree(ip->dev, a[j]);
5525     }
5526     brelse(bp);
5527     bfree(ip->dev, ip->addrs[NDIRECT]);
5528     ip->addrs[NDIRECT] = 0;
5529   }
5530 
5531   ip->size = 0;
5532   iupdate(ip);
5533 }
5534 
5535 
5536 void
5537 stati(struct inode *ip, struct stat *st)
5538 {
5539   st->dev = ip->dev;
5540   st->ino = ip->inum;
5541   st->type = ip->type;
5542   st->nlink = ip->nlink;
5543   st->size = ip->size;
5544 }
5545 
5546 
5547 
5548 
5549 
5550 
5551 int
5552 readi(struct inode *ip, char *dst, uint off, uint n)
5553 {
5554   uint tot, m;
5555   struct buf *bp;
5556 
5557   if(ip->type == T_DEV){
5558     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
5559       return -1;
5560     return devsw[ip->major].read(ip, dst, n);
5561   }
5562 
5563   if(off > ip->size || off + n < off)
5564     return -1;
5565   if(off + n > ip->size)
5566     n = ip->size - off;
5567 
5568   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
5569     bp = bread(ip->dev, bmap(ip, off/BSIZE));
5570     m = min(n - tot, BSIZE - off%BSIZE);
5571     /*
5572     cprintf("data off %d:\n", off);
5573     for (int j = 0; j < min(m, 10); j++) {
5574       cprintf("%x ", bp->data[off%BSIZE+j]);
5575     }
5576     cprintf("\n");
5577     */
5578     memmove(dst, bp->data + off%BSIZE, m);
5579     brelse(bp);
5580   }
5581   return n;
5582 }
5583 
5584 
5585 
5586 
5587 
5588 
5589 
5590 
5591 
5592 
5593 
5594 
5595 
5596 
5597 
5598 
5599 
5600 
5601 int
5602 writei(struct inode *ip, char *src, uint off, uint n)
5603 {
5604   uint tot, m;
5605   struct buf *bp;
5606 
5607   if(ip->type == T_DEV){
5608     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
5609       return -1;
5610     return devsw[ip->major].write(ip, src, n);
5611   }
5612 
5613   if(off > ip->size || off + n < off)
5614     return -1;
5615   if(off + n > MAXFILE*BSIZE)
5616     return -1;
5617 
5618   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
5619     bp = bread(ip->dev, bmap(ip, off/BSIZE));
5620     m = min(n - tot, BSIZE - off%BSIZE);
5621     memmove(bp->data + off%BSIZE, src, m);
5622     log_write(bp);
5623     brelse(bp);
5624   }
5625 
5626   if(n > 0 && off > ip->size){
5627     ip->size = off;
5628     iupdate(ip);
5629   }
5630   return n;
5631 }
5632 
5633 
5634 
5635 
5636 
5637 
5638 
5639 
5640 
5641 
5642 
5643 
5644 
5645 
5646 
5647 
5648 
5649 
5650 
5651 
5652 int
5653 namecmp(const char *s, const char *t)
5654 {
5655   return strncmp(s, t, DIRSIZ);
5656 }
5657 
5658 
5659 
5660 struct inode*
5661 dirlookup(struct inode *dp, char *name, uint *poff)
5662 {
5663   uint off, inum;
5664   struct dirent de;
5665 
5666   if(dp->type != T_DIR)
5667     panic("dirlookup not DIR");
5668 
5669   for(off = 0; off < dp->size; off += sizeof(de)){
5670     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
5671       panic("dirlink read");
5672     if(de.inum == 0)
5673       continue;
5674     if(namecmp(name, de.name) == 0){
5675       
5676       if(poff)
5677         *poff = off;
5678       inum = de.inum;
5679       return iget(dp->dev, inum);
5680     }
5681   }
5682 
5683   return 0;
5684 }
5685 
5686 
5687 
5688 
5689 
5690 
5691 
5692 
5693 
5694 
5695 
5696 
5697 
5698 
5699 
5700 
5701 int
5702 dirlink(struct inode *dp, char *name, uint inum)
5703 {
5704   int off;
5705   struct dirent de;
5706   struct inode *ip;
5707 
5708   
5709   if((ip = dirlookup(dp, name, 0)) != 0){
5710     iput(ip);
5711     return -1;
5712   }
5713 
5714   
5715   for(off = 0; off < dp->size; off += sizeof(de)){
5716     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
5717       panic("dirlink read");
5718     if(de.inum == 0)
5719       break;
5720   }
5721 
5722   strncpy(de.name, name, DIRSIZ);
5723   de.inum = inum;
5724   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
5725     panic("dirlink");
5726 
5727   return 0;
5728 }
5729 
5730 
5731 
5732 
5733 
5734 
5735 
5736 
5737 
5738 
5739 
5740 
5741 
5742 
5743 
5744 
5745 
5746 
5747 
5748 
5749 
5750 
5751 
5752 
5753 
5754 
5755 
5756 
5757 
5758 
5759 
5760 
5761 
5762 
5763 
5764 static char*
5765 skipelem(char *path, char *name)
5766 {
5767   char *s;
5768   int len;
5769 
5770   while(*path == '/')
5771     path++;
5772   if(*path == 0)
5773     return 0;
5774   s = path;
5775   while(*path != '/' && *path != 0)
5776     path++;
5777   len = path - s;
5778   if(len >= DIRSIZ)
5779     memmove(name, s, DIRSIZ);
5780   else {
5781     memmove(name, s, len);
5782     name[len] = 0;
5783   }
5784   while(*path == '/')
5785     path++;
5786   return path;
5787 }
5788 
5789 
5790 
5791 
5792 
5793 
5794 
5795 
5796 
5797 
5798 
5799 
5800 
5801 
5802 
5803 
5804 static struct inode*
5805 namex(char *path, int nameiparent, char *name)
5806 {
5807   struct inode *ip, *next;
5808 
5809   if(*path == '/')
5810     ip = iget(ROOTDEV, ROOTINO);
5811   else
5812     ip = idup(proc->cwd);
5813 
5814   while((path = skipelem(path, name)) != 0){
5815     ilock(ip);
5816     if(ip->type != T_DIR){
5817       iunlockput(ip);
5818       return 0;
5819     }
5820     if(nameiparent && *path == '\0'){
5821       
5822       iunlock(ip);
5823       return ip;
5824     }
5825     if((next = dirlookup(ip, name, 0)) == 0){
5826       iunlockput(ip);
5827       return 0;
5828     }
5829     iunlockput(ip);
5830     ip = next;
5831   }
5832   if(nameiparent){
5833     iput(ip);
5834     return 0;
5835   }
5836   return ip;
5837 }
5838 
5839 struct inode*
5840 namei(char *path)
5841 {
5842   char name[DIRSIZ];
5843   return namex(path, 0, name);
5844 }
5845 
5846 
5847 
5848 
5849 
5850 struct inode*
5851 nameiparent(char *path, char *name)
5852 {
5853   return namex(path, 1, name);
5854 }
5855 
5856 
5857 
5858 
5859 
5860 
5861 
5862 
5863 
5864 
5865 
5866 
5867 
5868 
5869 
5870 
5871 
5872 
5873 
5874 
5875 
5876 
5877 
5878 
5879 
5880 
5881 
5882 
5883 
5884 
5885 
5886 
5887 
5888 
5889 
5890 
5891 
5892 
5893 
5894 
5895 
5896 
5897 
5898 
5899 
5900 
5901 
5902 
5903 
5904 #include "types.h"
5905 #include "defs.h"
5906 #include "param.h"
5907 #include "fs.h"
5908 #include "spinlock.h"
5909 #include "sleeplock.h"
5910 #include "file.h"
5911 
5912 struct devsw devsw[NDEV];
5913 struct {
5914   struct spinlock lock;
5915   struct file file[NFILE];
5916 } ftable;
5917 
5918 void
5919 fileinit(void)
5920 {
5921   initlock(&ftable.lock, "ftable");
5922 }
5923 
5924 
5925 struct file*
5926 filealloc(void)
5927 {
5928   struct file *f;
5929 
5930   acquire(&ftable.lock);
5931   for(f = ftable.file; f < ftable.file + NFILE; f++){
5932     if(f->ref == 0){
5933       f->ref = 1;
5934       release(&ftable.lock);
5935       return f;
5936     }
5937   }
5938   release(&ftable.lock);
5939   return 0;
5940 }
5941 
5942 
5943 
5944 
5945 
5946 
5947 
5948 
5949 
5950 
5951 struct file*
5952 filedup(struct file *f)
5953 {
5954   acquire(&ftable.lock);
5955   if(f->ref < 1)
5956     panic("filedup");
5957   f->ref++;
5958   release(&ftable.lock);
5959   return f;
5960 }
5961 
5962 
5963 void
5964 fileclose(struct file *f)
5965 {
5966   struct file ff;
5967 
5968   acquire(&ftable.lock);
5969   if(f->ref < 1)
5970     panic("fileclose");
5971   if(--f->ref > 0){
5972     release(&ftable.lock);
5973     return;
5974   }
5975   ff = *f;
5976   f->ref = 0;
5977   f->type = FD_NONE;
5978   release(&ftable.lock);
5979 
5980   if(ff.type == FD_PIPE)
5981     pipeclose(ff.pipe, ff.writable);
5982   else if(ff.type == FD_INODE){
5983     begin_op();
5984     iput(ff.ip);
5985     end_op();
5986   }
5987 }
5988 
5989 
5990 
5991 
5992 
5993 
5994 
5995 
5996 
5997 
5998 
5999 
6000 
6001 int
6002 filestat(struct file *f, struct stat *st)
6003 {
6004   if(f->type == FD_INODE){
6005     ilock(f->ip);
6006     stati(f->ip, st);
6007     iunlock(f->ip);
6008     return 0;
6009   }
6010   return -1;
6011 }
6012 
6013 
6014 int
6015 fileread(struct file *f, char *addr, int n)
6016 {
6017   int r;
6018 
6019   if(f->readable == 0)
6020     return -1;
6021   if(f->type == FD_PIPE)
6022     return piperead(f->pipe, addr, n);
6023   if(f->type == FD_INODE){
6024     ilock(f->ip);
6025     if((r = readi(f->ip, addr, f->off, n)) > 0)
6026       f->off += r;
6027     iunlock(f->ip);
6028     return r;
6029   }
6030   panic("fileread");
6031 }
6032 
6033 
6034 
6035 
6036 
6037 
6038 
6039 
6040 
6041 
6042 
6043 
6044 
6045 
6046 
6047 
6048 
6049 
6050 
6051 int
6052 filewrite(struct file *f, char *addr, int n)
6053 {
6054   int r;
6055 
6056   if(f->writable == 0)
6057     return -1;
6058   if(f->type == FD_PIPE)
6059     return pipewrite(f->pipe, addr, n);
6060   if(f->type == FD_INODE){
6061     
6062     
6063     
6064     
6065     
6066     
6067     int max = ((LOGSIZE-1-1-2) / 2) * 512;
6068     int i = 0;
6069     while(i < n){
6070       int n1 = n - i;
6071       if(n1 > max)
6072         n1 = max;
6073 
6074       begin_op();
6075       ilock(f->ip);
6076       if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
6077         f->off += r;
6078       iunlock(f->ip);
6079       end_op();
6080 
6081       if(r < 0)
6082         break;
6083       if(r != n1)
6084         panic("short filewrite");
6085       i += r;
6086     }
6087     return i == n ? n : -1;
6088   }
6089   panic("filewrite");
6090 }
6091 
6092 
6093 
6094 
6095 
6096 
6097 
6098 
6099 
6100 
6101 
6102 
6103 
6104 
6105 
6106 #include "types.h"
6107 #include "defs.h"
6108 #include "param.h"
6109 #include "stat.h"
6110 #include "mmu.h"
6111 #include "proc.h"
6112 #include "fs.h"
6113 #include "spinlock.h"
6114 #include "sleeplock.h"
6115 #include "file.h"
6116 #include "fcntl.h"
6117 
6118 
6119 
6120 static int
6121 argfd(int n, int *pfd, struct file **pf)
6122 {
6123   int fd;
6124   struct file *f;
6125 
6126   if(argint(n, &fd) < 0)
6127     return -1;
6128   if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
6129     return -1;
6130   if(pfd)
6131     *pfd = fd;
6132   if(pf)
6133     *pf = f;
6134   return 0;
6135 }
6136 
6137 
6138 
6139 
6140 
6141 
6142 
6143 
6144 
6145 
6146 
6147 
6148 
6149 
6150 
6151 
6152 static int
6153 fdalloc(struct file *f)
6154 {
6155   int fd;
6156 
6157   for(fd = 0; fd < NOFILE; fd++){
6158     if(proc->ofile[fd] == 0){
6159       proc->ofile[fd] = f;
6160       return fd;
6161     }
6162   }
6163   return -1;
6164 }
6165 
6166 int
6167 sys_dup(void)
6168 {
6169   struct file *f;
6170   int fd;
6171 
6172   if(argfd(0, 0, &f) < 0)
6173     return -1;
6174   if((fd=fdalloc(f)) < 0)
6175     return -1;
6176   filedup(f);
6177   return fd;
6178 }
6179 
6180 int
6181 sys_read(void)
6182 {
6183   struct file *f;
6184   int n;
6185   char *p;
6186 
6187   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
6188     return -1;
6189   return fileread(f, p, n);
6190 }
6191 
6192 
6193 
6194 
6195 
6196 
6197 
6198 
6199 
6200 int
6201 sys_write(void)
6202 {
6203   struct file *f;
6204   int n;
6205   char *p;
6206 
6207   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
6208     return -1;
6209   return filewrite(f, p, n);
6210 }
6211 
6212 int
6213 sys_close(void)
6214 {
6215   int fd;
6216   struct file *f;
6217 
6218   if(argfd(0, &fd, &f) < 0)
6219     return -1;
6220   proc->ofile[fd] = 0;
6221   fileclose(f);
6222   return 0;
6223 }
6224 
6225 int
6226 sys_fstat(void)
6227 {
6228   struct file *f;
6229   struct stat *st;
6230 
6231   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
6232     return -1;
6233   return filestat(f, st);
6234 }
6235 
6236 
6237 
6238 
6239 
6240 
6241 
6242 
6243 
6244 
6245 
6246 
6247 
6248 
6249 
6250 
6251 int
6252 sys_link(void)
6253 {
6254   char name[DIRSIZ], *new, *old;
6255   struct inode *dp, *ip;
6256 
6257   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
6258     return -1;
6259 
6260   begin_op();
6261   if((ip = namei(old)) == 0){
6262     end_op();
6263     return -1;
6264   }
6265 
6266   ilock(ip);
6267   if(ip->type == T_DIR){
6268     iunlockput(ip);
6269     end_op();
6270     return -1;
6271   }
6272 
6273   ip->nlink++;
6274   iupdate(ip);
6275   iunlock(ip);
6276 
6277   if((dp = nameiparent(new, name)) == 0)
6278     goto bad;
6279   ilock(dp);
6280   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
6281     iunlockput(dp);
6282     goto bad;
6283   }
6284   iunlockput(dp);
6285   iput(ip);
6286 
6287   end_op();
6288 
6289   return 0;
6290 
6291 bad:
6292   ilock(ip);
6293   ip->nlink--;
6294   iupdate(ip);
6295   iunlockput(ip);
6296   end_op();
6297   return -1;
6298 }
6299 
6300 
6301 static int
6302 isdirempty(struct inode *dp)
6303 {
6304   int off;
6305   struct dirent de;
6306 
6307   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
6308     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
6309       panic("isdirempty: readi");
6310     if(de.inum != 0)
6311       return 0;
6312   }
6313   return 1;
6314 }
6315 
6316 
6317 
6318 
6319 
6320 
6321 
6322 
6323 
6324 
6325 
6326 
6327 
6328 
6329 
6330 
6331 
6332 
6333 
6334 
6335 
6336 
6337 
6338 
6339 
6340 
6341 
6342 
6343 
6344 
6345 
6346 
6347 
6348 
6349 
6350 int
6351 sys_unlink(void)
6352 {
6353   struct inode *ip, *dp;
6354   struct dirent de;
6355   char name[DIRSIZ], *path;
6356   uint off;
6357 
6358   if(argstr(0, &path) < 0)
6359     return -1;
6360 
6361   begin_op();
6362   if((dp = nameiparent(path, name)) == 0){
6363     end_op();
6364     return -1;
6365   }
6366 
6367   ilock(dp);
6368 
6369   
6370   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
6371     goto bad;
6372 
6373   if((ip = dirlookup(dp, name, &off)) == 0)
6374     goto bad;
6375   ilock(ip);
6376 
6377   if(ip->nlink < 1)
6378     panic("unlink: nlink < 1");
6379   if(ip->type == T_DIR && !isdirempty(ip)){
6380     iunlockput(ip);
6381     goto bad;
6382   }
6383 
6384   memset(&de, 0, sizeof(de));
6385   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
6386     panic("unlink: writei");
6387   if(ip->type == T_DIR){
6388     dp->nlink--;
6389     iupdate(dp);
6390   }
6391   iunlockput(dp);
6392 
6393   ip->nlink--;
6394   iupdate(ip);
6395   iunlockput(ip);
6396 
6397   end_op();
6398 
6399   return 0;
6400 bad:
6401   iunlockput(dp);
6402   end_op();
6403   return -1;
6404 }
6405 
6406 static struct inode*
6407 create(char *path, short type, short major, short minor)
6408 {
6409   uint off;
6410   struct inode *ip, *dp;
6411   char name[DIRSIZ];
6412 
6413   if((dp = nameiparent(path, name)) == 0)
6414     return 0;
6415   ilock(dp);
6416 
6417   if((ip = dirlookup(dp, name, &off)) != 0){
6418     iunlockput(dp);
6419     ilock(ip);
6420     if(type == T_FILE && ip->type == T_FILE)
6421       return ip;
6422     iunlockput(ip);
6423     return 0;
6424   }
6425 
6426   if((ip = ialloc(dp->dev, type)) == 0)
6427     panic("create: ialloc");
6428 
6429   ilock(ip);
6430   ip->major = major;
6431   ip->minor = minor;
6432   ip->nlink = 1;
6433   iupdate(ip);
6434 
6435   if(type == T_DIR){  
6436     dp->nlink++;  
6437     iupdate(dp);
6438     
6439     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
6440       panic("create dots");
6441   }
6442 
6443   if(dirlink(dp, name, ip->inum) < 0)
6444     panic("create: dirlink");
6445 
6446   iunlockput(dp);
6447 
6448   return ip;
6449 }
6450 int
6451 sys_open(void)
6452 {
6453   char *path;
6454   int fd, omode;
6455   struct file *f;
6456   struct inode *ip;
6457 
6458   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
6459     return -1;
6460 
6461   begin_op();
6462 
6463   if(omode & O_CREATE){
6464     ip = create(path, T_FILE, 0, 0);
6465     if(ip == 0){
6466       end_op();
6467       return -1;
6468     }
6469   } else {
6470     if((ip = namei(path)) == 0){
6471       end_op();
6472       return -1;
6473     }
6474     ilock(ip);
6475     if(ip->type == T_DIR && omode != O_RDONLY){
6476       iunlockput(ip);
6477       end_op();
6478       return -1;
6479     }
6480   }
6481 
6482   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
6483     if(f)
6484       fileclose(f);
6485     iunlockput(ip);
6486     end_op();
6487     return -1;
6488   }
6489   iunlock(ip);
6490   end_op();
6491 
6492   f->type = FD_INODE;
6493   f->ip = ip;
6494   f->off = 0;
6495   f->readable = !(omode & O_WRONLY);
6496   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
6497   return fd;
6498 }
6499 
6500 int
6501 sys_mkdir(void)
6502 {
6503   char *path;
6504   struct inode *ip;
6505 
6506   begin_op();
6507   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
6508     end_op();
6509     return -1;
6510   }
6511   iunlockput(ip);
6512   end_op();
6513   return 0;
6514 }
6515 
6516 int
6517 sys_mknod(void)
6518 {
6519   struct inode *ip;
6520   char *path;
6521   int major, minor;
6522 
6523   begin_op();
6524   if((argstr(0, &path)) < 0 ||
6525      argint(1, &major) < 0 ||
6526      argint(2, &minor) < 0 ||
6527      (ip = create(path, T_DEV, major, minor)) == 0){
6528     end_op();
6529     return -1;
6530   }
6531   iunlockput(ip);
6532   end_op();
6533   return 0;
6534 }
6535 
6536 
6537 
6538 
6539 
6540 
6541 
6542 
6543 
6544 
6545 
6546 
6547 
6548 
6549 
6550 int
6551 sys_chdir(void)
6552 {
6553   char *path;
6554   struct inode *ip;
6555 
6556   begin_op();
6557   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
6558     end_op();
6559     return -1;
6560   }
6561   ilock(ip);
6562   if(ip->type != T_DIR){
6563     iunlockput(ip);
6564     end_op();
6565     return -1;
6566   }
6567   iunlock(ip);
6568   iput(proc->cwd);
6569   end_op();
6570   proc->cwd = ip;
6571   return 0;
6572 }
6573 
6574 int
6575 sys_exec(void)
6576 {
6577   char *path, *argv[MAXARG];
6578   int i;
6579   uint uargv, uarg;
6580 
6581   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
6582     return -1;
6583   }
6584   memset(argv, 0, sizeof(argv));
6585   for(i=0;; i++){
6586     if(i >= NELEM(argv))
6587       return -1;
6588     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
6589       return -1;
6590     if(uarg == 0){
6591       argv[i] = 0;
6592       break;
6593     }
6594     if(fetchstr(uarg, &argv[i]) < 0)
6595       return -1;
6596   }
6597   return exec(path, argv);
6598 }
6599 
6600 int
6601 sys_pipe(void)
6602 {
6603   int *fd;
6604   struct file *rf, *wf;
6605   int fd0, fd1;
6606 
6607   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
6608     return -1;
6609   if(pipealloc(&rf, &wf) < 0)
6610     return -1;
6611   fd0 = -1;
6612   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
6613     if(fd0 >= 0)
6614       proc->ofile[fd0] = 0;
6615     fileclose(rf);
6616     fileclose(wf);
6617     return -1;
6618   }
6619   fd[0] = fd0;
6620   fd[1] = fd1;
6621   return 0;
6622 }
6623 
6624 
6625 
6626 
6627 
6628 
6629 
6630 
6631 
6632 
6633 
6634 
6635 
6636 
6637 
6638 
6639 
6640 
6641 
6642 
6643 
6644 
6645 
6646 
6647 
6648 
6649 
6650 #include "types.h"
6651 #include "param.h"
6652 #include "memlayout.h"
6653 #include "mmu.h"
6654 #include "proc.h"
6655 #include "defs.h"
6656 #include "x86.h"
6657 #include "elf.h"
6658 
6659 int
6660 exec(char *path, char **argv)
6661 {
6662   char *s, *last;
6663   int i, off;
6664   uint argc, sz, sp, ustack[3+MAXARG+1];
6665   struct elfhdr elf;
6666   struct inode *ip;
6667   struct proghdr ph;
6668   pde_t *pgdir, *oldpgdir;
6669 
6670   begin_op();
6671 
6672   if((ip = namei(path)) == 0){
6673     end_op();
6674     return -1;
6675   }
6676   ilock(ip);
6677   pgdir = 0;
6678 
6679   
6680   if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
6681     goto bad;
6682   if(elf.magic != ELF_MAGIC)
6683     goto bad;
6684 
6685   if((pgdir = setupkvm()) == 0)
6686     goto bad;
6687 
6688   
6689   sz = 0;
6690   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
6691     if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
6692       goto bad;
6693     if(ph.type != ELF_PROG_LOAD)
6694       continue;
6695     if(ph.memsz < ph.filesz)
6696       goto bad;
6697     if(ph.vaddr + ph.memsz < ph.vaddr)
6698       goto bad;
6699     if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
6700       goto bad;
6701     if(ph.vaddr % PGSIZE != 0)
6702       goto bad;
6703     if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
6704       goto bad;
6705   }
6706   iunlockput(ip);
6707   end_op();
6708   ip = 0;
6709 
6710   
6711   
6712   sz = PGROUNDUP(sz);
6713   if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
6714     goto bad;
6715   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
6716   sp = sz;
6717 
6718   
6719   for(argc = 0; argv[argc]; argc++) {
6720     if(argc >= MAXARG)
6721       goto bad;
6722     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
6723     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
6724       goto bad;
6725     ustack[3+argc] = sp;
6726   }
6727   ustack[3+argc] = 0;
6728 
6729   ustack[0] = 0xffffffff;  
6730   ustack[1] = argc;
6731   ustack[2] = sp - (argc+1)*4;  
6732 
6733   sp -= (3+argc+1) * 4;
6734   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
6735     goto bad;
6736 
6737   
6738   for(last=s=path; *s; s++)
6739     if(*s == '/')
6740       last = s+1;
6741   safestrcpy(proc->name, last, sizeof(proc->name));
6742 
6743   
6744   oldpgdir = proc->pgdir;
6745   proc->pgdir = pgdir;
6746   proc->sz = sz;
6747   proc->tf->eip = elf.entry;  
6748   proc->tf->esp = sp;
6749   switchuvm(proc);
6750   freevm(oldpgdir);
6751   return 0;
6752 
6753  bad:
6754   if(pgdir)
6755     freevm(pgdir);
6756   if(ip){
6757     iunlockput(ip);
6758     end_op();
6759   }
6760   return -1;
6761 }
6762 
6763 
6764 
6765 
6766 
6767 
6768 
6769 
6770 
6771 
6772 
6773 
6774 
6775 
6776 
6777 
6778 
6779 
6780 
6781 
6782 
6783 
6784 
6785 
6786 
6787 
6788 
6789 
6790 
6791 
6792 
6793 
6794 
6795 
6796 
6797 
6798 
6799 
6800 #include "types.h"
6801 #include "defs.h"
6802 #include "param.h"
6803 #include "mmu.h"
6804 #include "proc.h"
6805 #include "fs.h"
6806 #include "spinlock.h"
6807 #include "sleeplock.h"
6808 #include "file.h"
6809 
6810 #define PIPESIZE 512
6811 
6812 struct pipe {
6813   struct spinlock lock;
6814   char data[PIPESIZE];
6815   uint nread;     
6816   uint nwrite;    
6817   int readopen;   
6818   int writeopen;  
6819 };
6820 
6821 int
6822 pipealloc(struct file **f0, struct file **f1)
6823 {
6824   struct pipe *p;
6825 
6826   p = 0;
6827   *f0 = *f1 = 0;
6828   if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
6829     goto bad;
6830   if((p = (struct pipe*)kalloc()) == 0)
6831     goto bad;
6832   p->readopen = 1;
6833   p->writeopen = 1;
6834   p->nwrite = 0;
6835   p->nread = 0;
6836   initlock(&p->lock, "pipe");
6837   (*f0)->type = FD_PIPE;
6838   (*f0)->readable = 1;
6839   (*f0)->writable = 0;
6840   (*f0)->pipe = p;
6841   (*f1)->type = FD_PIPE;
6842   (*f1)->readable = 0;
6843   (*f1)->writable = 1;
6844   (*f1)->pipe = p;
6845   return 0;
6846 
6847 
6848 
6849 
6850  bad:
6851   if(p)
6852     kfree((char*)p);
6853   if(*f0)
6854     fileclose(*f0);
6855   if(*f1)
6856     fileclose(*f1);
6857   return -1;
6858 }
6859 
6860 void
6861 pipeclose(struct pipe *p, int writable)
6862 {
6863   acquire(&p->lock);
6864   if(writable){
6865     p->writeopen = 0;
6866     wakeup(&p->nread);
6867   } else {
6868     p->readopen = 0;
6869     wakeup(&p->nwrite);
6870   }
6871   if(p->readopen == 0 && p->writeopen == 0){
6872     release(&p->lock);
6873     kfree((char*)p);
6874   } else
6875     release(&p->lock);
6876 }
6877 
6878 
6879 int
6880 pipewrite(struct pipe *p, char *addr, int n)
6881 {
6882   int i;
6883 
6884   acquire(&p->lock);
6885   for(i = 0; i < n; i++){
6886     while(p->nwrite == p->nread + PIPESIZE){  
6887       if(p->readopen == 0 || proc->killed){
6888         release(&p->lock);
6889         return -1;
6890       }
6891       wakeup(&p->nread);
6892       sleep(&p->nwrite, &p->lock);  
6893     }
6894     p->data[p->nwrite++ % PIPESIZE] = addr[i];
6895   }
6896   wakeup(&p->nread);  
6897   release(&p->lock);
6898   return n;
6899 }
6900 int
6901 piperead(struct pipe *p, char *addr, int n)
6902 {
6903   int i;
6904 
6905   acquire(&p->lock);
6906   while(p->nread == p->nwrite && p->writeopen){  
6907     if(proc->killed){
6908       release(&p->lock);
6909       return -1;
6910     }
6911     sleep(&p->nread, &p->lock); 
6912   }
6913   for(i = 0; i < n; i++){  
6914     if(p->nread == p->nwrite)
6915       break;
6916     addr[i] = p->data[p->nread++ % PIPESIZE];
6917   }
6918   wakeup(&p->nwrite);  
6919   release(&p->lock);
6920   return i;
6921 }
6922 
6923 
6924 
6925 
6926 
6927 
6928 
6929 
6930 
6931 
6932 
6933 
6934 
6935 
6936 
6937 
6938 
6939 
6940 
6941 
6942 
6943 
6944 
6945 
6946 
6947 
6948 
6949 
6950 #include "types.h"
6951 #include "x86.h"
6952 
6953 void*
6954 memset(void *dst, int c, uint n)
6955 {
6956   if ((int)dst%4 == 0 && n%4 == 0){
6957     c &= 0xFF;
6958     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
6959   } else
6960     stosb(dst, c, n);
6961   return dst;
6962 }
6963 
6964 int
6965 memcmp(const void *v1, const void *v2, uint n)
6966 {
6967   const uchar *s1, *s2;
6968 
6969   s1 = v1;
6970   s2 = v2;
6971   while(n-- > 0){
6972     if(*s1 != *s2)
6973       return *s1 - *s2;
6974     s1++, s2++;
6975   }
6976 
6977   return 0;
6978 }
6979 
6980 void*
6981 memmove(void *dst, const void *src, uint n)
6982 {
6983   const char *s;
6984   char *d;
6985 
6986   s = src;
6987   d = dst;
6988   if(s < d && s + n > d){
6989     s += n;
6990     d += n;
6991     while(n-- > 0)
6992       *--d = *--s;
6993   } else
6994     while(n-- > 0)
6995       *d++ = *s++;
6996 
6997   return dst;
6998 }
6999 
7000 
7001 void*
7002 memcpy(void *dst, const void *src, uint n)
7003 {
7004   return memmove(dst, src, n);
7005 }
7006 
7007 int
7008 strncmp(const char *p, const char *q, uint n)
7009 {
7010   while(n > 0 && *p && *p == *q)
7011     n--, p++, q++;
7012   if(n == 0)
7013     return 0;
7014   return (uchar)*p - (uchar)*q;
7015 }
7016 
7017 char*
7018 strncpy(char *s, const char *t, int n)
7019 {
7020   char *os;
7021 
7022   os = s;
7023   while(n-- > 0 && (*s++ = *t++) != 0)
7024     ;
7025   while(n-- > 0)
7026     *s++ = 0;
7027   return os;
7028 }
7029 
7030 
7031 char*
7032 safestrcpy(char *s, const char *t, int n)
7033 {
7034   char *os;
7035 
7036   os = s;
7037   if(n <= 0)
7038     return os;
7039   while(--n > 0 && (*s++ = *t++) != 0)
7040     ;
7041   *s = 0;
7042   return os;
7043 }
7044 
7045 
7046 
7047 
7048 
7049 
7050 int
7051 strlen(const char *s)
7052 {
7053   int n;
7054 
7055   for(n = 0; s[n]; n++)
7056     ;
7057   return n;
7058 }
7059 
7060 
7061 
7062 
7063 
7064 
7065 
7066 
7067 
7068 
7069 
7070 
7071 
7072 
7073 
7074 
7075 
7076 
7077 
7078 
7079 
7080 
7081 
7082 
7083 
7084 
7085 
7086 
7087 
7088 
7089 
7090 
7091 
7092 
7093 
7094 
7095 
7096 
7097 
7098 
7099 
7100 
7101 
7102 struct mp {             
7103   uchar signature[4];           
7104   void *physaddr;               
7105   uchar length;                 
7106   uchar specrev;                
7107   uchar checksum;               
7108   uchar type;                   
7109   uchar imcrp;
7110   uchar reserved[3];
7111 };
7112 
7113 struct mpconf {         
7114   uchar signature[4];           
7115   ushort length;                
7116   uchar version;                
7117   uchar checksum;               
7118   uchar product[20];            
7119   uint *oemtable;               
7120   ushort oemlength;             
7121   ushort entry;                 
7122   uint *lapicaddr;              
7123   ushort xlength;               
7124   uchar xchecksum;              
7125   uchar reserved;
7126 };
7127 
7128 struct mpproc {         
7129   uchar type;                   
7130   uchar apicid;                 
7131   uchar version;                
7132   uchar flags;                  
7133     #define MPBOOT 0x02           
7134   uchar signature[4];           
7135   uint feature;                 
7136   uchar reserved[8];
7137 };
7138 
7139 struct mpioapic {       
7140   uchar type;                   
7141   uchar apicno;                 
7142   uchar version;                
7143   uchar flags;                  
7144   uint *addr;                  
7145 };
7146 
7147 
7148 
7149 
7150 
7151 #define MPPROC    0x00  
7152 #define MPBUS     0x01  
7153 #define MPIOAPIC  0x02  
7154 #define MPIOINTR  0x03  
7155 #define MPLINTR   0x04  
7156 
7157 
7158 
7159 
7160 
7161 
7162 
7163 
7164 
7165 
7166 
7167 
7168 
7169 
7170 
7171 
7172 
7173 
7174 
7175 
7176 
7177 
7178 
7179 
7180 
7181 
7182 
7183 
7184 
7185 
7186 
7187 
7188 
7189 
7190 
7191 
7192 
7193 
7194 
7195 
7196 
7197 
7198 
7199 
7200 
7201 
7202 
7203 
7204 
7205 
7206 
7207 
7208 
7209 
7210 
7211 
7212 
7213 
7214 
7215 
7216 
7217 
7218 
7219 
7220 
7221 
7222 
7223 
7224 
7225 
7226 
7227 
7228 
7229 
7230 
7231 
7232 
7233 
7234 
7235 
7236 
7237 
7238 
7239 
7240 
7241 
7242 
7243 
7244 
7245 
7246 
7247 
7248 
7249 
7250 
7251 
7252 
7253 
7254 #include "types.h"
7255 #include "defs.h"
7256 #include "param.h"
7257 #include "memlayout.h"
7258 #include "mp.h"
7259 #include "x86.h"
7260 #include "mmu.h"
7261 #include "proc.h"
7262 
7263 struct cpu cpus[NCPU];
7264 int ismp;
7265 int ncpu;
7266 uchar ioapicid;
7267 
7268 static uchar
7269 sum(uchar *addr, int len)
7270 {
7271   int i, sum;
7272 
7273   sum = 0;
7274   for(i=0; i<len; i++)
7275     sum += addr[i];
7276   return sum;
7277 }
7278 
7279 
7280 static struct mp*
7281 mpsearch1(uint a, int len)
7282 {
7283   uchar *e, *p, *addr;
7284 
7285   addr = P2V(a);
7286   e = addr+len;
7287   for(p = addr; p < e; p += sizeof(struct mp))
7288     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
7289       return (struct mp*)p;
7290   return 0;
7291 }
7292 
7293 
7294 
7295 
7296 
7297 
7298 
7299 
7300 
7301 
7302 
7303 
7304 
7305 static struct mp*
7306 mpsearch(void)
7307 {
7308   uchar *bda;
7309   uint p;
7310   struct mp *mp;
7311 
7312   bda = (uchar *) P2V(0x400);
7313   if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
7314     if((mp = mpsearch1(p, 1024)))
7315       return mp;
7316   } else {
7317     p = ((bda[0x14]<<8)|bda[0x13])*1024;
7318     if((mp = mpsearch1(p-1024, 1024)))
7319       return mp;
7320   }
7321   return mpsearch1(0xF0000, 0x10000);
7322 }
7323 
7324 
7325 
7326 
7327 
7328 
7329 static struct mpconf*
7330 mpconfig(struct mp **pmp)
7331 {
7332   struct mpconf *conf;
7333   struct mp *mp;
7334 
7335   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
7336     return 0;
7337   conf = (struct mpconf*) P2V((uint) mp->physaddr);
7338   if(memcmp(conf, "PCMP", 4) != 0)
7339     return 0;
7340   if(conf->version != 1 && conf->version != 4)
7341     return 0;
7342   if(sum((uchar*)conf, conf->length) != 0)
7343     return 0;
7344   *pmp = mp;
7345   return conf;
7346 }
7347 
7348 
7349 
7350 void
7351 mpinit(void)
7352 {
7353   uchar *p, *e;
7354   struct mp *mp;
7355   struct mpconf *conf;
7356   struct mpproc *proc;
7357   struct mpioapic *ioapic;
7358 
7359   if((conf = mpconfig(&mp)) == 0)
7360     return;
7361   ismp = 1;
7362   lapic = (uint*)conf->lapicaddr;
7363   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
7364     switch(*p){
7365     case MPPROC:
7366       proc = (struct mpproc*)p;
7367       if(ncpu < NCPU) {
7368         cpus[ncpu].apicid = proc->apicid;  
7369         ncpu++;
7370       }
7371       p += sizeof(struct mpproc);
7372       continue;
7373     case MPIOAPIC:
7374       ioapic = (struct mpioapic*)p;
7375       ioapicid = ioapic->apicno;
7376       p += sizeof(struct mpioapic);
7377       continue;
7378     case MPBUS:
7379     case MPIOINTR:
7380     case MPLINTR:
7381       p += 8;
7382       continue;
7383     default:
7384       ismp = 0;
7385       break;
7386     }
7387   }
7388   if(!ismp){
7389     
7390     ncpu = 1;
7391     lapic = 0;
7392     ioapicid = 0;
7393     return;
7394   }
7395 
7396 
7397 
7398 
7399 
7400   if(mp->imcrp){
7401     
7402     
7403     outb(0x22, 0x70);   
7404     outb(0x23, inb(0x23) | 1);  
7405   }
7406 }
7407 
7408 
7409 
7410 
7411 
7412 
7413 
7414 
7415 
7416 
7417 
7418 
7419 
7420 
7421 
7422 
7423 
7424 
7425 
7426 
7427 
7428 
7429 
7430 
7431 
7432 
7433 
7434 
7435 
7436 
7437 
7438 
7439 
7440 
7441 
7442 
7443 
7444 
7445 
7446 
7447 
7448 
7449 
7450 
7451 
7452 
7453 #include "param.h"
7454 #include "types.h"
7455 #include "defs.h"
7456 #include "date.h"
7457 #include "memlayout.h"
7458 #include "traps.h"
7459 #include "mmu.h"
7460 #include "x86.h"
7461 #include "proc.h"  
7462 
7463 
7464 #define ID      (0x0020/4)   
7465 #define VER     (0x0030/4)   
7466 #define TPR     (0x0080/4)   
7467 #define EOI     (0x00B0/4)   
7468 #define SVR     (0x00F0/4)   
7469   #define ENABLE     0x00000100   
7470 #define ESR     (0x0280/4)   
7471 #define ICRLO   (0x0300/4)   
7472   #define INIT       0x00000500   
7473   #define STARTUP    0x00000600   
7474   #define DELIVS     0x00001000   
7475   #define ASSERT     0x00004000   
7476   #define DEASSERT   0x00000000
7477   #define LEVEL      0x00008000   
7478   #define BCAST      0x00080000   
7479   #define BUSY       0x00001000
7480   #define FIXED      0x00000000
7481 #define ICRHI   (0x0310/4)   
7482 #define TIMER   (0x0320/4)   
7483   #define X1         0x0000000B   
7484   #define PERIODIC   0x00020000   
7485 #define PCINT   (0x0340/4)   
7486 #define LINT0   (0x0350/4)   
7487 #define LINT1   (0x0360/4)   
7488 #define ERROR   (0x0370/4)   
7489   #define MASKED     0x00010000   
7490 #define TICR    (0x0380/4)   
7491 #define TCCR    (0x0390/4)   
7492 #define TDCR    (0x03E0/4)   
7493 
7494 volatile uint *lapic;  
7495 
7496 
7497 
7498 
7499 
7500 static void
7501 lapicw(int index, int value)
7502 {
7503   lapic[index] = value;
7504   lapic[ID];  
7505 }
7506 
7507 
7508 
7509 
7510 
7511 
7512 
7513 
7514 
7515 
7516 
7517 
7518 
7519 
7520 
7521 
7522 
7523 
7524 
7525 
7526 
7527 
7528 
7529 
7530 
7531 
7532 
7533 
7534 
7535 
7536 
7537 
7538 
7539 
7540 
7541 
7542 
7543 
7544 
7545 
7546 
7547 
7548 
7549 
7550 void
7551 lapicinit(void)
7552 {
7553   if(!lapic)
7554     return;
7555 
7556   
7557   lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
7558 
7559   
7560   
7561   
7562   
7563   lapicw(TDCR, X1);
7564   lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
7565   lapicw(TICR, 10000000);
7566 
7567   
7568   lapicw(LINT0, MASKED);
7569   lapicw(LINT1, MASKED);
7570 
7571   
7572   
7573   if(((lapic[VER]>>16) & 0xFF) >= 4)
7574     lapicw(PCINT, MASKED);
7575 
7576   
7577   lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
7578 
7579   
7580   lapicw(ESR, 0);
7581   lapicw(ESR, 0);
7582 
7583   
7584   lapicw(EOI, 0);
7585 
7586   
7587   lapicw(ICRHI, 0);
7588   lapicw(ICRLO, BCAST | INIT | LEVEL);
7589   while(lapic[ICRLO] & DELIVS)
7590     ;
7591 
7592   
7593   lapicw(TPR, 0);
7594 }
7595 
7596 
7597 
7598 
7599 
7600 int
7601 cpunum(void)
7602 {
7603   int apicid, i;
7604 
7605   
7606   
7607   
7608   
7609   
7610   if(readeflags()&FL_IF){
7611     static int n;
7612     if(n++ == 0)
7613       cprintf("cpu called from %x with interrupts enabled\n",
7614         __builtin_return_address(0));
7615   }
7616 
7617   if (!lapic)
7618     return 0;
7619 
7620   apicid = lapic[ID] >> 24;
7621   for (i = 0; i < ncpu; ++i) {
7622     if (cpus[i].apicid == apicid)
7623       return i;
7624   }
7625   panic("unknown apicid\n");
7626 }
7627 
7628 
7629 void
7630 lapiceoi(void)
7631 {
7632   if(lapic)
7633     lapicw(EOI, 0);
7634 }
7635 
7636 
7637 
7638 void
7639 microdelay(int us)
7640 {
7641 }
7642 
7643 
7644 
7645 
7646 
7647 
7648 
7649 
7650 #define CMOS_PORT    0x70
7651 #define CMOS_RETURN  0x71
7652 
7653 
7654 
7655 void
7656 lapicstartap(uchar apicid, uint addr)
7657 {
7658   int i;
7659   ushort *wrv;
7660 
7661   
7662   
7663   
7664   outb(CMOS_PORT, 0xF);  
7665   outb(CMOS_PORT+1, 0x0A);
7666   wrv = (ushort*)P2V((0x40<<4 | 0x67));  
7667   wrv[0] = 0;
7668   wrv[1] = addr >> 4;
7669 
7670   
7671   
7672   lapicw(ICRHI, apicid<<24);
7673   lapicw(ICRLO, INIT | LEVEL | ASSERT);
7674   microdelay(200);
7675   lapicw(ICRLO, INIT | LEVEL);
7676   microdelay(100);    
7677 
7678   
7679   
7680   
7681   
7682   
7683   for(i = 0; i < 2; i++){
7684     lapicw(ICRHI, apicid<<24);
7685     lapicw(ICRLO, STARTUP | (addr>>12));
7686     microdelay(200);
7687   }
7688 }
7689 
7690 
7691 
7692 
7693 
7694 
7695 
7696 
7697 
7698 
7699 
7700 #define CMOS_STATA   0x0a
7701 #define CMOS_STATB   0x0b
7702 #define CMOS_UIP    (1 << 7)        
7703 
7704 #define SECS    0x00
7705 #define MINS    0x02
7706 #define HOURS   0x04
7707 #define DAY     0x07
7708 #define MONTH   0x08
7709 #define YEAR    0x09
7710 
7711 static uint cmos_read(uint reg)
7712 {
7713   outb(CMOS_PORT,  reg);
7714   microdelay(200);
7715 
7716   return inb(CMOS_RETURN);
7717 }
7718 
7719 static void fill_rtcdate(struct rtcdate *r)
7720 {
7721   r->second = cmos_read(SECS);
7722   r->minute = cmos_read(MINS);
7723   r->hour   = cmos_read(HOURS);
7724   r->day    = cmos_read(DAY);
7725   r->month  = cmos_read(MONTH);
7726   r->year   = cmos_read(YEAR);
7727 }
7728 
7729 
7730 void cmostime(struct rtcdate *r)
7731 {
7732   struct rtcdate t1, t2;
7733   int sb, bcd;
7734 
7735   sb = cmos_read(CMOS_STATB);
7736 
7737   bcd = (sb & (1 << 2)) == 0;
7738 
7739   
7740   for(;;) {
7741     fill_rtcdate(&t1);
7742     if(cmos_read(CMOS_STATA) & CMOS_UIP)
7743         continue;
7744     fill_rtcdate(&t2);
7745     if(memcmp(&t1, &t2, sizeof(t1)) == 0)
7746       break;
7747   }
7748 
7749 
7750   
7751   if(bcd) {
7752 #define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
7753     CONV(second);
7754     CONV(minute);
7755     CONV(hour  );
7756     CONV(day   );
7757     CONV(month );
7758     CONV(year  );
7759 #undef     CONV
7760   }
7761 
7762   *r = t1;
7763   r->year += 2000;
7764 }
7765 
7766 
7767 
7768 
7769 
7770 
7771 
7772 
7773 
7774 
7775 
7776 
7777 
7778 
7779 
7780 
7781 
7782 
7783 
7784 
7785 
7786 
7787 
7788 
7789 
7790 
7791 
7792 
7793 
7794 
7795 
7796 
7797 
7798 
7799 
7800 
7801 
7802 
7803 
7804 #include "types.h"
7805 #include "defs.h"
7806 #include "traps.h"
7807 
7808 #define IOAPIC  0xFEC00000   
7809 
7810 #define REG_ID     0x00  
7811 #define REG_VER    0x01  
7812 #define REG_TABLE  0x10  
7813 
7814 
7815 
7816 
7817 
7818 
7819 #define INT_DISABLED   0x00010000  
7820 #define INT_LEVEL      0x00008000  
7821 #define INT_ACTIVELOW  0x00002000  
7822 #define INT_LOGICAL    0x00000800  
7823 
7824 volatile struct ioapic *ioapic;
7825 
7826 
7827 struct ioapic {
7828   uint reg;
7829   uint pad[3];
7830   uint data;
7831 };
7832 
7833 static uint
7834 ioapicread(int reg)
7835 {
7836   ioapic->reg = reg;
7837   return ioapic->data;
7838 }
7839 
7840 static void
7841 ioapicwrite(int reg, uint data)
7842 {
7843   ioapic->reg = reg;
7844   ioapic->data = data;
7845 }
7846 
7847 
7848 
7849 
7850 void
7851 ioapicinit(void)
7852 {
7853   int i, id, maxintr;
7854 
7855   if(!ismp)
7856     return;
7857 
7858   ioapic = (volatile struct ioapic*)IOAPIC;
7859   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
7860   id = ioapicread(REG_ID) >> 24;
7861   if(id != ioapicid)
7862     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
7863 
7864   
7865   
7866   for(i = 0; i <= maxintr; i++){
7867     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
7868     ioapicwrite(REG_TABLE+2*i+1, 0);
7869   }
7870 }
7871 
7872 void
7873 ioapicenable(int irq, int cpunum)
7874 {
7875   if(!ismp)
7876     return;
7877 
7878   
7879   
7880   
7881   ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
7882   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
7883 }
7884 
7885 
7886 
7887 
7888 
7889 
7890 
7891 
7892 
7893 
7894 
7895 
7896 
7897 
7898 
7899 
7900 
7901 
7902 #include "types.h"
7903 #include "x86.h"
7904 #include "traps.h"
7905 
7906 
7907 #define IO_PIC1         0x20    
7908 #define IO_PIC2         0xA0    
7909 
7910 #define IRQ_SLAVE       2       
7911 
7912 
7913 
7914 static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);
7915 
7916 static void
7917 picsetmask(ushort mask)
7918 {
7919   irqmask = mask;
7920   outb(IO_PIC1+1, mask);
7921   outb(IO_PIC2+1, mask >> 8);
7922 }
7923 
7924 void
7925 picenable(int irq)
7926 {
7927   picsetmask(irqmask & ~(1<<irq));
7928 }
7929 
7930 
7931 void
7932 picinit(void)
7933 {
7934   
7935   outb(IO_PIC1+1, 0xFF);
7936   outb(IO_PIC2+1, 0xFF);
7937 
7938   
7939 
7940   
7941   
7942   
7943   
7944   outb(IO_PIC1, 0x11);
7945 
7946   
7947   outb(IO_PIC1+1, T_IRQ0);
7948 
7949 
7950   
7951   
7952   outb(IO_PIC1+1, 1<<IRQ_SLAVE);
7953 
7954   
7955   
7956   
7957   
7958   
7959   
7960   
7961   
7962   outb(IO_PIC1+1, 0x3);
7963 
7964   
7965   outb(IO_PIC2, 0x11);                  
7966   outb(IO_PIC2+1, T_IRQ0 + 8);      
7967   outb(IO_PIC2+1, IRQ_SLAVE);           
7968   
7969   
7970   outb(IO_PIC2+1, 0x3);                 
7971 
7972   
7973   
7974   
7975   
7976   outb(IO_PIC1, 0x68);             
7977   outb(IO_PIC1, 0x0a);             
7978 
7979   outb(IO_PIC2, 0x68);             
7980   outb(IO_PIC2, 0x0a);             
7981 
7982   if(irqmask != 0xFFFF)
7983     picsetmask(irqmask);
7984 }
7985 
7986 
7987 
7988 
7989 
7990 
7991 
7992 
7993 
7994 
7995 
7996 
7997 
7998 
7999 
8000 
8001 
8002 
8003 
8004 
8005 
8006 
8007 
8008 
8009 
8010 
8011 
8012 
8013 
8014 
8015 
8016 
8017 
8018 
8019 
8020 
8021 
8022 
8023 
8024 
8025 
8026 
8027 
8028 
8029 
8030 
8031 
8032 
8033 
8034 
8035 
8036 
8037 
8038 
8039 
8040 
8041 
8042 
8043 
8044 
8045 
8046 
8047 
8048 
8049 
8050 
8051 
8052 #define KBSTATP         0x64    
8053 #define KBS_DIB         0x01    
8054 #define KBDATAP         0x60    
8055 
8056 #define NO              0
8057 
8058 #define SHIFT           (1<<0)
8059 #define CTL             (1<<1)
8060 #define ALT             (1<<2)
8061 
8062 #define CAPSLOCK        (1<<3)
8063 #define NUMLOCK         (1<<4)
8064 #define SCROLLLOCK      (1<<5)
8065 
8066 #define E0ESC           (1<<6)
8067 
8068 
8069 #define KEY_HOME        0xE0
8070 #define KEY_END         0xE1
8071 #define KEY_UP          0xE2
8072 #define KEY_DN          0xE3
8073 #define KEY_LF          0xE4
8074 #define KEY_RT          0xE5
8075 #define KEY_PGUP        0xE6
8076 #define KEY_PGDN        0xE7
8077 #define KEY_INS         0xE8
8078 #define KEY_DEL         0xE9
8079 
8080 
8081 #define C(x) (x - '@')
8082 
8083 static uchar shiftcode[256] =
8084 {
8085   [0x1D] CTL,
8086   [0x2A] SHIFT,
8087   [0x36] SHIFT,
8088   [0x38] ALT,
8089   [0x9D] CTL,
8090   [0xB8] ALT
8091 };
8092 
8093 static uchar togglecode[256] =
8094 {
8095   [0x3A] CAPSLOCK,
8096   [0x45] NUMLOCK,
8097   [0x46] SCROLLLOCK
8098 };
8099 
8100 static uchar normalmap[256] =
8101 {
8102   NO,   0x1B, '1',  '2',  '3',  '4',  '5',  '6',  
8103   '7',  '8',  '9',  '0',  '-',  '=',  '\b', '\t',
8104   'q',  'w',  'e',  'r',  't',  'y',  'u',  'i',  
8105   'o',  'p',  '[',  ']',  '\n', NO,   'a',  's',
8106   'd',  'f',  'g',  'h',  'j',  'k',  'l',  ';',  
8107   '\'', '`',  NO,   '\\', 'z',  'x',  'c',  'v',
8108   'b',  'n',  'm',  ',',  '.',  '/',  NO,   '*',  
8109   NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
8110   NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  
8111   '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
8112   '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   
8113   [0x9C] '\n',      
8114   [0xB5] '/',       
8115   [0xC8] KEY_UP,    [0xD0] KEY_DN,
8116   [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
8117   [0xCB] KEY_LF,    [0xCD] KEY_RT,
8118   [0x97] KEY_HOME,  [0xCF] KEY_END,
8119   [0xD2] KEY_INS,   [0xD3] KEY_DEL
8120 };
8121 
8122 static uchar shiftmap[256] =
8123 {
8124   NO,   033,  '!',  '@',  '#',  '$',  '%',  '^',  
8125   '&',  '*',  '(',  ')',  '_',  '+',  '\b', '\t',
8126   'Q',  'W',  'E',  'R',  'T',  'Y',  'U',  'I',  
8127   'O',  'P',  '{',  '}',  '\n', NO,   'A',  'S',
8128   'D',  'F',  'G',  'H',  'J',  'K',  'L',  ':',  
8129   '"',  '~',  NO,   '|',  'Z',  'X',  'C',  'V',
8130   'B',  'N',  'M',  '<',  '>',  '?',  NO,   '*',  
8131   NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
8132   NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  
8133   '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
8134   '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   
8135   [0x9C] '\n',      
8136   [0xB5] '/',       
8137   [0xC8] KEY_UP,    [0xD0] KEY_DN,
8138   [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
8139   [0xCB] KEY_LF,    [0xCD] KEY_RT,
8140   [0x97] KEY_HOME,  [0xCF] KEY_END,
8141   [0xD2] KEY_INS,   [0xD3] KEY_DEL
8142 };
8143 
8144 
8145 
8146 
8147 
8148 
8149 
8150 static uchar ctlmap[256] =
8151 {
8152   NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
8153   NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
8154   C('Q'),  C('W'),  C('E'),  C('R'),  C('T'),  C('Y'),  C('U'),  C('I'),
8155   C('O'),  C('P'),  NO,      NO,      '\r',    NO,      C('A'),  C('S'),
8156   C('D'),  C('F'),  C('G'),  C('H'),  C('J'),  C('K'),  C('L'),  NO,
8157   NO,      NO,      NO,      C('\\'), C('Z'),  C('X'),  C('C'),  C('V'),
8158   C('B'),  C('N'),  C('M'),  NO,      NO,      C('/'),  NO,      NO,
8159   [0x9C] '\r',      
8160   [0xB5] C('/'),    
8161   [0xC8] KEY_UP,    [0xD0] KEY_DN,
8162   [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
8163   [0xCB] KEY_LF,    [0xCD] KEY_RT,
8164   [0x97] KEY_HOME,  [0xCF] KEY_END,
8165   [0xD2] KEY_INS,   [0xD3] KEY_DEL
8166 };
8167 
8168 
8169 
8170 
8171 
8172 
8173 
8174 
8175 
8176 
8177 
8178 
8179 
8180 
8181 
8182 
8183 
8184 
8185 
8186 
8187 
8188 
8189 
8190 
8191 
8192 
8193 
8194 
8195 
8196 
8197 
8198 
8199 
8200 #include "types.h"
8201 #include "x86.h"
8202 #include "defs.h"
8203 #include "kbd.h"
8204 
8205 int
8206 kbdgetc(void)
8207 {
8208   static uint shift;
8209   static uchar *charcode[4] = {
8210     normalmap, shiftmap, ctlmap, ctlmap
8211   };
8212   uint st, data, c;
8213 
8214   st = inb(KBSTATP);
8215   if((st & KBS_DIB) == 0)
8216     return -1;
8217   data = inb(KBDATAP);
8218 
8219   if(data == 0xE0){
8220     shift |= E0ESC;
8221     return 0;
8222   } else if(data & 0x80){
8223     
8224     data = (shift & E0ESC ? data : data & 0x7F);
8225     shift &= ~(shiftcode[data] | E0ESC);
8226     return 0;
8227   } else if(shift & E0ESC){
8228     
8229     data |= 0x80;
8230     shift &= ~E0ESC;
8231   }
8232 
8233   shift |= shiftcode[data];
8234   shift ^= togglecode[data];
8235   c = charcode[shift & (CTL | SHIFT)][data];
8236   if(shift & CAPSLOCK){
8237     if('a' <= c && c <= 'z')
8238       c += 'A' - 'a';
8239     else if('A' <= c && c <= 'Z')
8240       c += 'a' - 'A';
8241   }
8242   return c;
8243 }
8244 
8245 void
8246 kbdintr(void)
8247 {
8248   consoleintr(kbdgetc);
8249 }
8250 
8251 
8252 
8253 
8254 #include "types.h"
8255 #include "defs.h"
8256 #include "param.h"
8257 #include "traps.h"
8258 #include "spinlock.h"
8259 #include "sleeplock.h"
8260 #include "fs.h"
8261 #include "file.h"
8262 #include "memlayout.h"
8263 #include "mmu.h"
8264 #include "proc.h"
8265 #include "x86.h"
8266 
8267 static void consputc(int);
8268 
8269 static int panicked = 0;
8270 
8271 static struct {
8272   struct spinlock lock;
8273   int locking;
8274 } cons;
8275 
8276 static void
8277 printint(int xx, int base, int sign)
8278 {
8279   static char digits[] = "0123456789abcdef";
8280   char buf[16];
8281   int i;
8282   uint x;
8283 
8284   if(sign && (sign = xx < 0))
8285     x = -xx;
8286   else
8287     x = xx;
8288 
8289   i = 0;
8290   do{
8291     buf[i++] = digits[x % base];
8292   }while((x /= base) != 0);
8293 
8294   if(sign)
8295     buf[i++] = '-';
8296 
8297   while(--i >= 0)
8298     consputc(buf[i]);
8299 }
8300 
8301 
8302 
8303 
8304 
8305 
8306 
8307 
8308 
8309 
8310 
8311 
8312 
8313 
8314 
8315 
8316 
8317 
8318 
8319 
8320 
8321 
8322 
8323 
8324 
8325 
8326 
8327 
8328 
8329 
8330 
8331 
8332 
8333 
8334 
8335 
8336 
8337 
8338 
8339 
8340 
8341 
8342 
8343 
8344 
8345 
8346 
8347 
8348 
8349 
8350 
8351 void
8352 cprintf(char *fmt, ...)
8353 {
8354   int i, c, locking;
8355   uint *argp;
8356   char *s;
8357 
8358   locking = cons.locking;
8359   if(locking)
8360     acquire(&cons.lock);
8361 
8362   if (fmt == 0)
8363     panic("null fmt");
8364 
8365   argp = (uint*)(void*)(&fmt + 1);
8366   for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
8367     if(c != '%'){
8368       consputc(c);
8369       continue;
8370     }
8371     c = fmt[++i] & 0xff;
8372     if(c == 0)
8373       break;
8374     switch(c){
8375     case 'd':
8376       printint(*argp++, 10, 1);
8377       break;
8378     case 'x':
8379     case 'p':
8380       printint(*argp++, 16, 0);
8381       break;
8382     case 's':
8383       if((s = (char*)*argp++) == 0)
8384         s = "(null)";
8385       for(; *s; s++)
8386         consputc(*s);
8387       break;
8388     case '%':
8389       consputc('%');
8390       break;
8391     default:
8392       
8393       consputc('%');
8394       consputc(c);
8395       break;
8396     }
8397   }
8398 
8399 
8400   if(locking)
8401     release(&cons.lock);
8402 }
8403 
8404 void
8405 panic(char *s)
8406 {
8407   int i;
8408   uint pcs[10];
8409 
8410   cli();
8411   cons.locking = 0;
8412   cprintf("cpu with apicid %d: panic: ", cpu->apicid);
8413   cprintf(s);
8414   cprintf("\n");
8415   getcallerpcs(&s, pcs);
8416   for(i=0; i<10; i++)
8417     cprintf(" %p", pcs[i]);
8418   panicked = 1; 
8419   for(;;)
8420     ;
8421 }
8422 
8423 
8424 
8425 
8426 
8427 
8428 
8429 
8430 
8431 
8432 
8433 
8434 
8435 
8436 
8437 
8438 
8439 
8440 
8441 
8442 
8443 
8444 
8445 
8446 
8447 
8448 
8449 
8450 #define BACKSPACE 0x100
8451 #define CRTPORT 0x3d4
8452 static ushort *crt = (ushort*)P2V(0xb8000);  
8453 
8454 static void
8455 cgaputc(int c)
8456 {
8457   int pos;
8458 
8459   
8460   outb(CRTPORT, 14);
8461   pos = inb(CRTPORT+1) << 8;
8462   outb(CRTPORT, 15);
8463   pos |= inb(CRTPORT+1);
8464 
8465   if(c == '\n')
8466     pos += 80 - pos%80;
8467   else if(c == BACKSPACE){
8468     if(pos > 0) --pos;
8469   } else
8470     crt[pos++] = (c&0xff) | 0x0700;  
8471 
8472   if(pos < 0 || pos > 25*80)
8473     panic("pos under/overflow");
8474 
8475   if((pos/80) >= 24){  
8476     memmove(crt, crt+80, sizeof(crt[0])*23*80);
8477     pos -= 80;
8478     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
8479   }
8480 
8481   outb(CRTPORT, 14);
8482   outb(CRTPORT+1, pos>>8);
8483   outb(CRTPORT, 15);
8484   outb(CRTPORT+1, pos);
8485   crt[pos] = ' ' | 0x0700;
8486 }
8487 
8488 
8489 
8490 
8491 
8492 
8493 
8494 
8495 
8496 
8497 
8498 
8499 
8500 void
8501 consputc(int c)
8502 {
8503   if(panicked){
8504     cli();
8505     for(;;)
8506       ;
8507   }
8508 
8509   if(c == BACKSPACE){
8510     uartputc('\b'); uartputc(' '); uartputc('\b');
8511   } else
8512     uartputc(c);
8513   cgaputc(c);
8514 }
8515 
8516 #define INPUT_BUF 128
8517 struct {
8518   char buf[INPUT_BUF];
8519   uint r;  
8520   uint w;  
8521   uint e;  
8522 } input;
8523 
8524 #define C(x)  ((x)-'@')  
8525 
8526 void
8527 consoleintr(int (*getc)(void))
8528 {
8529   int c, doprocdump = 0;
8530 
8531   acquire(&cons.lock);
8532   while((c = getc()) >= 0){
8533     switch(c){
8534     case C('P'):  
8535       
8536       doprocdump = 1;
8537       break;
8538     case C('U'):  
8539       while(input.e != input.w &&
8540             input.buf[(input.e-1) % INPUT_BUF] != '\n'){
8541         input.e--;
8542         consputc(BACKSPACE);
8543       }
8544       break;
8545     case C('H'): case '\x7f':  
8546       if(input.e != input.w){
8547         input.e--;
8548         consputc(BACKSPACE);
8549       }
8550       break;
8551     default:
8552       if(c != 0 && input.e-input.r < INPUT_BUF){
8553         c = (c == '\r') ? '\n' : c;
8554         input.buf[input.e++ % INPUT_BUF] = c;
8555         consputc(c);
8556         if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
8557           input.w = input.e;
8558           wakeup(&input.r);
8559         }
8560       }
8561       break;
8562     }
8563   }
8564   release(&cons.lock);
8565   if(doprocdump) {
8566     procdump();  
8567   }
8568 }
8569 
8570 int
8571 consoleread(struct inode *ip, char *dst, int n)
8572 {
8573   uint target;
8574   int c;
8575 
8576   iunlock(ip);
8577   target = n;
8578   acquire(&cons.lock);
8579   while(n > 0){
8580     while(input.r == input.w){
8581       if(proc->killed){
8582         release(&cons.lock);
8583         ilock(ip);
8584         return -1;
8585       }
8586       sleep(&input.r, &cons.lock);
8587     }
8588     c = input.buf[input.r++ % INPUT_BUF];
8589     if(c == C('D')){  
8590       if(n < target){
8591         
8592         
8593         input.r--;
8594       }
8595       break;
8596     }
8597     *dst++ = c;
8598     --n;
8599     if(c == '\n')
8600       break;
8601   }
8602   release(&cons.lock);
8603   ilock(ip);
8604 
8605   return target - n;
8606 }
8607 
8608 int
8609 consolewrite(struct inode *ip, char *buf, int n)
8610 {
8611   int i;
8612 
8613   iunlock(ip);
8614   acquire(&cons.lock);
8615   for(i = 0; i < n; i++)
8616     consputc(buf[i] & 0xff);
8617   release(&cons.lock);
8618   ilock(ip);
8619 
8620   return n;
8621 }
8622 
8623 void
8624 consoleinit(void)
8625 {
8626   initlock(&cons.lock, "console");
8627 
8628   devsw[CONSOLE].write = consolewrite;
8629   devsw[CONSOLE].read = consoleread;
8630   cons.locking = 1;
8631 
8632   picenable(IRQ_KBD);
8633   ioapicenable(IRQ_KBD, 0);
8634 }
8635 
8636 
8637 
8638 
8639 
8640 
8641 
8642 
8643 
8644 
8645 
8646 
8647 
8648 
8649 
8650 
8651 
8652 
8653 
8654 #include "types.h"
8655 #include "defs.h"
8656 #include "traps.h"
8657 #include "x86.h"
8658 
8659 #define IO_TIMER1       0x040           
8660 
8661 
8662 
8663 
8664 
8665 #define TIMER_FREQ      1193182
8666 #define TIMER_DIV(x)    ((TIMER_FREQ+(x)/2)/(x))
8667 
8668 #define TIMER_MODE      (IO_TIMER1 + 3) 
8669 #define TIMER_SEL0      0x00    
8670 #define TIMER_RATEGEN   0x04    
8671 #define TIMER_16BIT     0x30    
8672 
8673 void
8674 timerinit(void)
8675 {
8676   
8677   outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
8678   outb(IO_TIMER1, TIMER_DIV(100) % 256);
8679   outb(IO_TIMER1, TIMER_DIV(100) / 256);
8680   picenable(IRQ_TIMER);
8681 }
8682 
8683 
8684 
8685 
8686 
8687 
8688 
8689 
8690 
8691 
8692 
8693 
8694 
8695 
8696 
8697 
8698 
8699 
8700 
8701 
8702 #include "types.h"
8703 #include "defs.h"
8704 #include "param.h"
8705 #include "traps.h"
8706 #include "spinlock.h"
8707 #include "sleeplock.h"
8708 #include "fs.h"
8709 #include "file.h"
8710 #include "mmu.h"
8711 #include "proc.h"
8712 #include "x86.h"
8713 
8714 #define COM1    0x3f8
8715 
8716 static int uart;    
8717 
8718 void
8719 uartinit(void)
8720 {
8721   char *p;
8722 
8723   
8724   outb(COM1+2, 0);
8725 
8726   
8727   outb(COM1+3, 0x80);    
8728   outb(COM1+0, 115200/9600);
8729   outb(COM1+1, 0);
8730   outb(COM1+3, 0x03);    
8731   outb(COM1+4, 0);
8732   outb(COM1+1, 0x01);    
8733 
8734   
8735   if(inb(COM1+5) == 0xFF)
8736     return;
8737   uart = 1;
8738 
8739   
8740   
8741   inb(COM1+2);
8742   inb(COM1+0);
8743   picenable(IRQ_COM1);
8744   ioapicenable(IRQ_COM1, 0);
8745 
8746   
8747   for(p="xv6...\n"; *p; p++)
8748     uartputc(*p);
8749 }
8750 void
8751 uartputc(int c)
8752 {
8753   int i;
8754 
8755   if(!uart)
8756     return;
8757   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
8758     microdelay(10);
8759   outb(COM1+0, c);
8760 }
8761 
8762 static int
8763 uartgetc(void)
8764 {
8765   if(!uart)
8766     return -1;
8767   if(!(inb(COM1+5) & 0x01))
8768     return -1;
8769   return inb(COM1+0);
8770 }
8771 
8772 void
8773 uartintr(void)
8774 {
8775   consoleintr(uartgetc);
8776 }
8777 
8778 
8779 
8780 
8781 
8782 
8783 
8784 
8785 
8786 
8787 
8788 
8789 
8790 
8791 
8792 
8793 
8794 
8795 
8796 
8797 
8798 
8799 
8800 
8801 
8802 
8803 
8804 
8805 
8806 
8807 
8808 .globl start
8809 start:
8810   pushl $argv
8811   pushl $init
8812   pushl $0  
8813   movl $SYS_exec, %eax
8814   int $T_SYSCALL
8815 
8816 
8817 exit:
8818   movl $SYS_exit, %eax
8819   int $T_SYSCALL
8820   jmp exit
8821 
8822 
8823 init:
8824   .string "/init\0"
8825 
8826 
8827 .p2align 2
8828 argv:
8829   .long init
8830   .long 0
8831 
8832 
8833 
8834 
8835 
8836 
8837 
8838 
8839 
8840 
8841 
8842 
8843 
8844 
8845 
8846 
8847 
8848 
8849 
8850 
8851 
8852 
8853 
8854   .globl name; \
8855   name: \
8856     movl $SYS_ 
8857     int $T_SYSCALL; \
8858     ret
8859 
8860 SYSCALL(fork)
8861 SYSCALL(exit)
8862 SYSCALL(wait)
8863 SYSCALL(pipe)
8864 SYSCALL(read)
8865 SYSCALL(write)
8866 SYSCALL(close)
8867 SYSCALL(kill)
8868 SYSCALL(exec)
8869 SYSCALL(open)
8870 SYSCALL(mknod)
8871 SYSCALL(unlink)
8872 SYSCALL(fstat)
8873 SYSCALL(link)
8874 SYSCALL(mkdir)
8875 SYSCALL(chdir)
8876 SYSCALL(dup)
8877 SYSCALL(getpid)
8878 SYSCALL(sbrk)
8879 SYSCALL(sleep)
8880 SYSCALL(uptime)
8881 SYSCALL(getppid)
8882 SYSCALL(getPerformanceData)
8883 
8884 
8885 
8886 
8887 
8888 
8889 
8890 
8891 
8892 
8893 
8894 
8895 
8896 
8897 
8898 
8899 
8900 
8901 
8902 #include "types.h"
8903 #include "stat.h"
8904 #include "user.h"
8905 #include "fcntl.h"
8906 
8907 char *argv[] = { "sh", 0 };
8908 
8909 int
8910 main(void)
8911 {
8912   int pid, wpid;
8913 
8914   if(open("console", O_RDWR) < 0){
8915     mknod("console", 1, 1);
8916     open("console", O_RDWR);
8917   }
8918   dup(0);  
8919   dup(0);  
8920 
8921   for(;;){
8922     printf(1, "init: starting sh\n");
8923     pid = fork();
8924     if(pid < 0){
8925       printf(1, "init: fork failed\n");
8926       exit();
8927     }
8928     if(pid == 0){
8929       exec("sh", argv);
8930       printf(1, "init: exec sh failed\n");
8931       exit();
8932     }
8933     while((wpid=wait()) >= 0 && wpid != pid)
8934       printf(1, "zombie!\n");
8935   }
8936 }
8937 
8938 
8939 
8940 
8941 
8942 
8943 
8944 
8945 
8946 
8947 
8948 
8949 
8950 
8951 
8952 #include "types.h"
8953 #include "user.h"
8954 #include "fcntl.h"
8955 
8956 
8957 #define EXEC  1
8958 #define REDIR 2
8959 #define PIPE  3
8960 #define LIST  4
8961 #define BACK  5
8962 
8963 #define MAXARGS 10
8964 
8965 struct cmd {
8966   int type;
8967 };
8968 
8969 struct execcmd {
8970   int type;
8971   char *argv[MAXARGS];
8972   char *eargv[MAXARGS];
8973 };
8974 
8975 struct redircmd {
8976   int type;
8977   struct cmd *cmd;
8978   char *file;
8979   char *efile;
8980   int mode;
8981   int fd;
8982 };
8983 
8984 struct pipecmd {
8985   int type;
8986   struct cmd *left;
8987   struct cmd *right;
8988 };
8989 
8990 struct listcmd {
8991   int type;
8992   struct cmd *left;
8993   struct cmd *right;
8994 };
8995 
8996 struct backcmd {
8997   int type;
8998   struct cmd *cmd;
8999 };
9000 int fork1(void);  
9001 void panic(char*);
9002 struct cmd *parsecmd(char*);
9003 
9004 
9005 void
9006 runcmd(struct cmd *cmd)
9007 {
9008   int p[2];
9009   struct backcmd *bcmd;
9010   struct execcmd *ecmd;
9011   struct listcmd *lcmd;
9012   struct pipecmd *pcmd;
9013   struct redircmd *rcmd;
9014 
9015   if(cmd == 0)
9016     exit();
9017 
9018   switch(cmd->type){
9019   default:
9020     panic("runcmd");
9021 
9022   case EXEC:
9023     ecmd = (struct execcmd*)cmd;
9024     if(ecmd->argv[0] == 0)
9025       exit();
9026     exec(ecmd->argv[0], ecmd->argv);
9027     printf(2, "exec %s failed\n", ecmd->argv[0]);
9028     break;
9029 
9030   case REDIR:
9031     rcmd = (struct redircmd*)cmd;
9032     close(rcmd->fd);
9033     if(open(rcmd->file, rcmd->mode) < 0){
9034       printf(2, "open %s failed\n", rcmd->file);
9035       exit();
9036     }
9037     runcmd(rcmd->cmd);
9038     break;
9039 
9040   case LIST:
9041     lcmd = (struct listcmd*)cmd;
9042     if(fork1() == 0)
9043       runcmd(lcmd->left);
9044     wait();
9045     runcmd(lcmd->right);
9046     break;
9047 
9048 
9049 
9050   case PIPE:
9051     pcmd = (struct pipecmd*)cmd;
9052     if(pipe(p) < 0)
9053       panic("pipe");
9054     if(fork1() == 0){
9055       close(1);
9056       dup(p[1]);
9057       close(p[0]);
9058       close(p[1]);
9059       runcmd(pcmd->left);
9060     }
9061     if(fork1() == 0){
9062       close(0);
9063       dup(p[0]);
9064       close(p[0]);
9065       close(p[1]);
9066       runcmd(pcmd->right);
9067     }
9068     close(p[0]);
9069     close(p[1]);
9070     wait();
9071     wait();
9072     break;
9073 
9074   case BACK:
9075     bcmd = (struct backcmd*)cmd;
9076     if(fork1() == 0)
9077       runcmd(bcmd->cmd);
9078     break;
9079   }
9080   exit();
9081 }
9082 
9083 int
9084 getcmd(char *buf, int nbuf)
9085 {
9086   printf(2, "$ ");
9087   memset(buf, 0, nbuf);
9088   gets(buf, nbuf);
9089   if(buf[0] == 0) 
9090     return -1;
9091   return 0;
9092 }
9093 
9094 
9095 
9096 
9097 
9098 
9099 
9100 int
9101 main(void)
9102 {
9103   static char buf[100];
9104   int fd;
9105 
9106   
9107   while((fd = open("console", O_RDWR)) >= 0){
9108     if(fd >= 3){
9109       close(fd);
9110       break;
9111     }
9112   }
9113 
9114   
9115   while(getcmd(buf, sizeof(buf)) >= 0){
9116     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
9117       
9118       buf[strlen(buf)-1] = 0;  
9119       if(chdir(buf+3) < 0)
9120         printf(2, "cannot cd %s\n", buf+3);
9121       continue;
9122     }
9123     if(fork1() == 0)
9124       runcmd(parsecmd(buf));
9125     wait();
9126   }
9127   exit();
9128 }
9129 
9130 void
9131 panic(char *s)
9132 {
9133   printf(2, "%s\n", s);
9134   exit();
9135 }
9136 
9137 int
9138 fork1(void)
9139 {
9140   int pid;
9141 
9142   pid = fork();
9143   if(pid == -1)
9144     panic("fork");
9145   return pid;
9146 }
9147 
9148 
9149 
9150 
9151 
9152 struct cmd*
9153 execcmd(void)
9154 {
9155   struct execcmd *cmd;
9156 
9157   cmd = malloc(sizeof(*cmd));
9158   memset(cmd, 0, sizeof(*cmd));
9159   cmd->type = EXEC;
9160   return (struct cmd*)cmd;
9161 }
9162 
9163 struct cmd*
9164 redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
9165 {
9166   struct redircmd *cmd;
9167 
9168   cmd = malloc(sizeof(*cmd));
9169   memset(cmd, 0, sizeof(*cmd));
9170   cmd->type = REDIR;
9171   cmd->cmd = subcmd;
9172   cmd->file = file;
9173   cmd->efile = efile;
9174   cmd->mode = mode;
9175   cmd->fd = fd;
9176   return (struct cmd*)cmd;
9177 }
9178 
9179 struct cmd*
9180 pipecmd(struct cmd *left, struct cmd *right)
9181 {
9182   struct pipecmd *cmd;
9183 
9184   cmd = malloc(sizeof(*cmd));
9185   memset(cmd, 0, sizeof(*cmd));
9186   cmd->type = PIPE;
9187   cmd->left = left;
9188   cmd->right = right;
9189   return (struct cmd*)cmd;
9190 }
9191 
9192 
9193 
9194 
9195 
9196 
9197 
9198 
9199 
9200 struct cmd*
9201 listcmd(struct cmd *left, struct cmd *right)
9202 {
9203   struct listcmd *cmd;
9204 
9205   cmd = malloc(sizeof(*cmd));
9206   memset(cmd, 0, sizeof(*cmd));
9207   cmd->type = LIST;
9208   cmd->left = left;
9209   cmd->right = right;
9210   return (struct cmd*)cmd;
9211 }
9212 
9213 struct cmd*
9214 backcmd(struct cmd *subcmd)
9215 {
9216   struct backcmd *cmd;
9217 
9218   cmd = malloc(sizeof(*cmd));
9219   memset(cmd, 0, sizeof(*cmd));
9220   cmd->type = BACK;
9221   cmd->cmd = subcmd;
9222   return (struct cmd*)cmd;
9223 }
9224 
9225 
9226 
9227 
9228 
9229 
9230 
9231 
9232 
9233 
9234 
9235 
9236 
9237 
9238 
9239 
9240 
9241 
9242 
9243 
9244 
9245 
9246 
9247 
9248 
9249 
9250 
9251 
9252 char whitespace[] = " \t\r\n\v";
9253 char symbols[] = "<|>&;()";
9254 
9255 int
9256 gettoken(char **ps, char *es, char **q, char **eq)
9257 {
9258   char *s;
9259   int ret;
9260 
9261   s = *ps;
9262   while(s < es && strchr(whitespace, *s))
9263     s++;
9264   if(q)
9265     *q = s;
9266   ret = *s;
9267   switch(*s){
9268   case 0:
9269     break;
9270   case '|':
9271   case '(':
9272   case ')':
9273   case ';':
9274   case '&':
9275   case '<':
9276     s++;
9277     break;
9278   case '>':
9279     s++;
9280     if(*s == '>'){
9281       ret = '+';
9282       s++;
9283     }
9284     break;
9285   default:
9286     ret = 'a';
9287     while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
9288       s++;
9289     break;
9290   }
9291   if(eq)
9292     *eq = s;
9293 
9294   while(s < es && strchr(whitespace, *s))
9295     s++;
9296   *ps = s;
9297   return ret;
9298 }
9299 
9300 int
9301 peek(char **ps, char *es, char *toks)
9302 {
9303   char *s;
9304 
9305   s = *ps;
9306   while(s < es && strchr(whitespace, *s))
9307     s++;
9308   *ps = s;
9309   return *s && strchr(toks, *s);
9310 }
9311 
9312 struct cmd *parseline(char**, char*);
9313 struct cmd *parsepipe(char**, char*);
9314 struct cmd *parseexec(char**, char*);
9315 struct cmd *nulterminate(struct cmd*);
9316 
9317 struct cmd*
9318 parsecmd(char *s)
9319 {
9320   char *es;
9321   struct cmd *cmd;
9322 
9323   es = s + strlen(s);
9324   cmd = parseline(&s, es);
9325   peek(&s, es, "");
9326   if(s != es){
9327     printf(2, "leftovers: %s\n", s);
9328     panic("syntax");
9329   }
9330   nulterminate(cmd);
9331   return cmd;
9332 }
9333 
9334 struct cmd*
9335 parseline(char **ps, char *es)
9336 {
9337   struct cmd *cmd;
9338 
9339   cmd = parsepipe(ps, es);
9340   while(peek(ps, es, "&")){
9341     gettoken(ps, es, 0, 0);
9342     cmd = backcmd(cmd);
9343   }
9344   if(peek(ps, es, ";")){
9345     gettoken(ps, es, 0, 0);
9346     cmd = listcmd(cmd, parseline(ps, es));
9347   }
9348   return cmd;
9349 }
9350 struct cmd*
9351 parsepipe(char **ps, char *es)
9352 {
9353   struct cmd *cmd;
9354 
9355   cmd = parseexec(ps, es);
9356   if(peek(ps, es, "|")){
9357     gettoken(ps, es, 0, 0);
9358     cmd = pipecmd(cmd, parsepipe(ps, es));
9359   }
9360   return cmd;
9361 }
9362 
9363 struct cmd*
9364 parseredirs(struct cmd *cmd, char **ps, char *es)
9365 {
9366   int tok;
9367   char *q, *eq;
9368 
9369   while(peek(ps, es, "<>")){
9370     tok = gettoken(ps, es, 0, 0);
9371     if(gettoken(ps, es, &q, &eq) != 'a')
9372       panic("missing file for redirection");
9373     switch(tok){
9374     case '<':
9375       cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
9376       break;
9377     case '>':
9378       cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
9379       break;
9380     case '+':  
9381       cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
9382       break;
9383     }
9384   }
9385   return cmd;
9386 }
9387 
9388 
9389 
9390 
9391 
9392 
9393 
9394 
9395 
9396 
9397 
9398 
9399 
9400 struct cmd*
9401 parseblock(char **ps, char *es)
9402 {
9403   struct cmd *cmd;
9404 
9405   if(!peek(ps, es, "("))
9406     panic("parseblock");
9407   gettoken(ps, es, 0, 0);
9408   cmd = parseline(ps, es);
9409   if(!peek(ps, es, ")"))
9410     panic("syntax - missing )");
9411   gettoken(ps, es, 0, 0);
9412   cmd = parseredirs(cmd, ps, es);
9413   return cmd;
9414 }
9415 
9416 struct cmd*
9417 parseexec(char **ps, char *es)
9418 {
9419   char *q, *eq;
9420   int tok, argc;
9421   struct execcmd *cmd;
9422   struct cmd *ret;
9423 
9424   if(peek(ps, es, "("))
9425     return parseblock(ps, es);
9426 
9427   ret = execcmd();
9428   cmd = (struct execcmd*)ret;
9429 
9430   argc = 0;
9431   ret = parseredirs(ret, ps, es);
9432   while(!peek(ps, es, "|)&;")){
9433     if((tok=gettoken(ps, es, &q, &eq)) == 0)
9434       break;
9435     if(tok != 'a')
9436       panic("syntax");
9437     cmd->argv[argc] = q;
9438     cmd->eargv[argc] = eq;
9439     argc++;
9440     if(argc >= MAXARGS)
9441       panic("too many args");
9442     ret = parseredirs(ret, ps, es);
9443   }
9444   cmd->argv[argc] = 0;
9445   cmd->eargv[argc] = 0;
9446   return ret;
9447 }
9448 
9449 
9450 
9451 struct cmd*
9452 nulterminate(struct cmd *cmd)
9453 {
9454   int i;
9455   struct backcmd *bcmd;
9456   struct execcmd *ecmd;
9457   struct listcmd *lcmd;
9458   struct pipecmd *pcmd;
9459   struct redircmd *rcmd;
9460 
9461   if(cmd == 0)
9462     return 0;
9463 
9464   switch(cmd->type){
9465   case EXEC:
9466     ecmd = (struct execcmd*)cmd;
9467     for(i=0; ecmd->argv[i]; i++)
9468       *ecmd->eargv[i] = 0;
9469     break;
9470 
9471   case REDIR:
9472     rcmd = (struct redircmd*)cmd;
9473     nulterminate(rcmd->cmd);
9474     *rcmd->efile = 0;
9475     break;
9476 
9477   case PIPE:
9478     pcmd = (struct pipecmd*)cmd;
9479     nulterminate(pcmd->left);
9480     nulterminate(pcmd->right);
9481     break;
9482 
9483   case LIST:
9484     lcmd = (struct listcmd*)cmd;
9485     nulterminate(lcmd->left);
9486     nulterminate(lcmd->right);
9487     break;
9488 
9489   case BACK:
9490     bcmd = (struct backcmd*)cmd;
9491     nulterminate(bcmd->cmd);
9492     break;
9493   }
9494   return cmd;
9495 }
9496 
9497 
9498 
9499 
9500 
9501 
9502 
9503 
9504 
9505 
9506 
9507 
9508 
9509 .code16                       
9510 .globl start
9511 start:
9512   cli                         
9513 
9514   
9515   xorw    %ax,%ax             
9516   movw    %ax,%ds             
9517   movw    %ax,%es             
9518   movw    %ax,%ss             
9519 
9520   
9521   
9522 seta20.1:
9523   inb     $0x64,%al               
9524   testb   $0x2,%al
9525   jnz     seta20.1
9526 
9527   movb    $0xd1,%al               
9528   outb    %al,$0x64
9529 
9530 seta20.2:
9531   inb     $0x64,%al               
9532   testb   $0x2,%al
9533   jnz     seta20.2
9534 
9535   movb    $0xdf,%al               
9536   outb    %al,$0x60
9537 
9538   
9539   
9540   
9541   lgdt    gdtdesc
9542   movl    %cr0, %eax
9543   orl     $CR0_PE, %eax
9544   movl    %eax, %cr0
9545 
9546 
9547 
9548 
9549 
9550   
9551   
9552   
9553   ljmp    $(SEG_KCODE<<3), $start32
9554 
9555 .code32  
9556 start32:
9557   
9558   movw    $(SEG_KDATA<<3), %ax    
9559   movw    %ax, %ds                
9560   movw    %ax, %es                
9561   movw    %ax, %ss                
9562   movw    $0, %ax                 
9563   movw    %ax, %fs                
9564   movw    %ax, %gs                
9565 
9566   
9567   movl    $start, %esp
9568   call    bootmain
9569 
9570   
9571   
9572   movw    $0x8a00, %ax            
9573   movw    %ax, %dx
9574   outw    %ax, %dx
9575   movw    $0x8ae0, %ax            
9576   outw    %ax, %dx
9577 spin:
9578   jmp     spin
9579 
9580 
9581 .p2align 2                                
9582 gdt:
9583   SEG_NULLASM                             
9584   SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)   
9585   SEG_ASM(STA_W, 0x0, 0xffffffff)         
9586 
9587 gdtdesc:
9588   .word   (gdtdesc - gdt - 1)             
9589   .long   gdt                             
9590 
9591 
9592 
9593 
9594 
9595 
9596 
9597 
9598 
9599 
9600 
9601 
9602 
9603 
9604 
9605 
9606 
9607 #include "types.h"
9608 #include "elf.h"
9609 #include "x86.h"
9610 #include "memlayout.h"
9611 
9612 #define SECTSIZE  512
9613 
9614 void readseg(uchar*, uint, uint);
9615 
9616 void
9617 bootmain(void)
9618 {
9619   struct elfhdr *elf;
9620   struct proghdr *ph, *eph;
9621   void (*entry)(void);
9622   uchar* pa;
9623 
9624   elf = (struct elfhdr*)0x10000;  
9625 
9626   
9627   readseg((uchar*)elf, 4096, 0);
9628 
9629   
9630   if(elf->magic != ELF_MAGIC)
9631     return;  
9632 
9633   
9634   ph = (struct proghdr*)((uchar*)elf + elf->phoff);
9635   eph = ph + elf->phnum;
9636   for(; ph < eph; ph++){
9637     pa = (uchar*)ph->paddr;
9638     readseg(pa, ph->filesz, ph->off);
9639     if(ph->memsz > ph->filesz)
9640       stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
9641   }
9642 
9643   
9644   
9645   entry = (void(*)(void))(elf->entry);
9646   entry();
9647 }
9648 
9649 
9650 void
9651 waitdisk(void)
9652 {
9653   
9654   while((inb(0x1F7) & 0xC0) != 0x40)
9655     ;
9656 }
9657 
9658 
9659 void
9660 readsect(void *dst, uint offset)
9661 {
9662   
9663   waitdisk();
9664   outb(0x1F2, 1);   
9665   outb(0x1F3, offset);
9666   outb(0x1F4, offset >> 8);
9667   outb(0x1F5, offset >> 16);
9668   outb(0x1F6, (offset >> 24) | 0xE0);
9669   outb(0x1F7, 0x20);  
9670 
9671   
9672   waitdisk();
9673   insl(0x1F0, dst, SECTSIZE/4);
9674 }
9675 
9676 
9677 
9678 void
9679 readseg(uchar* pa, uint count, uint offset)
9680 {
9681   uchar* epa;
9682 
9683   epa = pa + count;
9684 
9685   
9686   pa -= offset % SECTSIZE;
9687 
9688   
9689   offset = (offset / SECTSIZE) + 1;
9690 
9691   
9692   
9693   
9694   for(; pa < epa; pa += SECTSIZE, offset++)
9695     readsect(pa, offset);
9696 }
9697 
9698 
9699 
